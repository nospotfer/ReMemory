/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.*;
import javax.swing.UIManager;
import model.Pacient;
import controlador.Utils;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import vista.tests.BNT;
import vista.tests.Cogstate;
import vista.tests.ColorTrails;
import vista.tests.Digits;
import vista.tests.FiveDigit;
import vista.tests.FluenciaVerbal;
import vista.tests.MemoriaLogicaI;
import vista.tests.MemoriaLogicaII;
import vista.tests.Test;

/**
 *
 * @author USER
 */
public class Sessio1 extends javax.swing.JFrame {

    private final String valoracio;
//    int pagina = 0;
//    int numPaginesTotal = 2;
    Pacient pacientActual;
//    private HashMap<String, HashMap<Integer, List<Object>>> taulaDigitsDD;
//    private HashMap<String, HashMap<Integer, List<Object>>> taulaDigitsDI;
//    private HashMap<String, HashMap<Integer, List<Object>>> taulaBNTA;
//    private HashMap<String, HashMap<Integer, List<Object>>> taulaBNTB;
//    private HashMap<String, HashMap<Integer, List<Object>>> taulaBNTC;
//    private Timer timer;
//    private Timer timerColor;
//    private Timer timerColor2;
//    private long startTime;
//    DecimalFormat timeFormatter;
//    JButton[] llistaBtn5digits;
//    String edatPacient;
//    long secondsColor1 = 0;
//    long secondsColor2 = 0;
    Frame parent;
    
    /**
     * Creates new form Sessio1
     * @param parent
     * @param pacientActual
     * @param valoracio
     */
    public Sessio1(Frame parent, Pacient pacientActual, String valoracio) {
        Utils.setIcon(this);

        this.parent = parent;
        
        this.pacientActual = pacientActual;
        
        initComponents();
        
        addTabs();

        this.setTitle(this.getTitle()+" | T"+valoracio);

        this.valoracio = valoracio;
        
//        convertEdat();
//        initTabs();
//        
//        initDigitsDirecteTable();
//        initDigitsInversTable();
//        
//        initML1ATable();
//        initML1BTable();
//        
//        initML2ATable();
//        initML2BTable();
//        initML2RecTable();
//        
//        initBNTATable();
//        initBNTBTable();
//        initBNTCTable();
//        
//        initColorTrails();
//        
//        initFluenciaVerbalTable();
//        
//        initTimer();
//        
//        initHashDD();
//        initHashDI();
//        
//        initHashBNTA();
//        initHashBNTB();
//        initHashBNTC();
//        
//        initCogstateButtons();
        
        anteriorBtn.setEnabled(false);

        Utils.carregar(this,pacientActual.getId(), "Sessio1_T"+valoracio);

        this.toFront();
        this.repaint();
    
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        dataPanel = new javax.swing.JPanel();
        tabbedPanel = new javax.swing.JTabbedPane();
        buttonPanel = new javax.swing.JPanel();
        acceptaBtn = new javax.swing.JButton();
        cancelaBtn = new javax.swing.JButton();
        anteriorBtn = new javax.swing.JButton();
        seguentBtn = new javax.swing.JButton();
        paginaLabel = new javax.swing.JLabel();
        paginaLabel2 = new javax.swing.JLabel();
        sepBottom = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sessió 1");
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        mainPanel.setLayout(new java.awt.BorderLayout());

        dataPanel.setLayout(new java.awt.BorderLayout());

        tabbedPanel.setToolTipText("");
        tabbedPanel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dataPanel.add(tabbedPanel, java.awt.BorderLayout.CENTER);

        mainPanel.add(dataPanel, java.awt.BorderLayout.CENTER);

        acceptaBtn.setText("Accepta");
        acceptaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptaBtnActionPerformed(evt);
            }
        });

        cancelaBtn.setText("Cancel·la");
        cancelaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelaBtnActionPerformed(evt);
            }
        });

        anteriorBtn.setText("Anterior");
        anteriorBtn.setEnabled(false);
        anteriorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorBtnActionPerformed(evt);
            }
        });

        seguentBtn.setText("Següent");
        seguentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seguentBtnActionPerformed(evt);
            }
        });

        paginaLabel.setText("1");

        paginaLabel2.setText("/ 10");

        sepBottom.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(anteriorBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(seguentBtn)
                .addGap(18, 18, 18)
                .addComponent(paginaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paginaLabel2)
                .addGap(18, 18, 18)
                .addComponent(sepBottom, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1020, Short.MAX_VALUE)
                .addComponent(acceptaBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelaBtn)
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(acceptaBtn)
                            .addComponent(cancelaBtn)
                            .addComponent(anteriorBtn)
                            .addComponent(seguentBtn)
                            .addComponent(paginaLabel)
                            .addComponent(paginaLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(sepBottom))
                .addContainerGap())
        );

        mainPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void acceptaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptaBtnActionPerformed
        Utils.guardar(this,pacientActual.getId(), "Sessio1_T"+valoracio );
        //this.guardarResultats();
        Utils.generaResultatsCSV(pacientActual.getId());
        ((MenuAvaluador)parent).checkCsv();
        ((MenuAvaluador)parent).checkCsvTotal();
        this.dispose();
    }//GEN-LAST:event_acceptaBtnActionPerformed

    private void cancelaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelaBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelaBtnActionPerformed

    private void anteriorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorBtnActionPerformed
        Test currentTest = (Test) tabbedPanel.getSelectedComponent();
        
        int pagina = currentTest.getPagina();
        
        paginaLabel.setText((pagina)+"");
        
        currentTest.paginaAnterior();
        
        if (pagina == 0){
            anteriorBtn.setEnabled(false);
            seguentBtn.setEnabled(true);
        }
        else if (pagina == currentTest.getNumPaginesTotal()-1){
            seguentBtn.setEnabled(true);
        }
    }//GEN-LAST:event_anteriorBtnActionPerformed

    private void seguentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seguentBtnActionPerformed
        Test currentTest = (Test) tabbedPanel.getSelectedComponent();

        int pagina = currentTest.getPagina();
        paginaLabel.setText((pagina)+"");
        
        currentTest.paginaSeguent();
        
        if (pagina == currentTest.getNumPaginesTotal()){
            seguentBtn.setEnabled(false);
            anteriorBtn.setEnabled(true);
        }
        else if (pagina == 2){
            anteriorBtn.setEnabled(true);
        }
    }//GEN-LAST:event_seguentBtnActionPerformed

//    private void calculaIndexColor() {
//        try {
//            if (colorTrailsTable.getValueAt(4,1) != null && colorTrailsTable.getValueAt(0,1) != null) {
//                int resultat1 = Integer.parseInt((String) colorTrailsTable.getValueAt(0, 1));
//                int resultat2 = Integer.parseInt((String) colorTrailsTable.getValueAt(4, 1));
//                colorTrailsTable.setValueAt(((float)(resultat2-resultat1)/resultat1)+"",8,1);
//            }
////            int resultat = Integer.parseInt((String)colorTrailsTable.getValueAt(0,1)) + Integer.parseInt((String)colorTrailsTable.getValueAt(4,1));
//
//        } catch (Exception ex){
//            Logger.getLogger(Sessio1.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sessio1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sessio1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sessio1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sessio1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sessio1(null,null, "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptaBtn;
    private javax.swing.JButton anteriorBtn;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelaBtn;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel paginaLabel;
    private javax.swing.JLabel paginaLabel2;
    private javax.swing.JButton seguentBtn;
    private javax.swing.JSeparator sepBottom;
    private javax.swing.JTabbedPane tabbedPanel;
    // End of variables declaration//GEN-END:variables

    
//    private void initDigitsDirecteTable() {
//        String header = "<html><font color=\"rgb(255,255,255)\">";
//        CustomModel model = new CustomModel(
//            new Object [][] {
//                {"1", "9 - 7			 ", null, "0", null},
//                {null, "6 - 3", null, "0", "0"},
//                {"2", "5 - 8 - 2			 ", null, "0", null},
//                {null, "6 - 9 - 4			 ", null, "0", "0"},
//                {"3", "7 - 2 - 8 - 6			 ", null, "0", null},
//                {null, "6 - 4 - 3 - 9			 ", null, "0", "0"},
//                {"4", "4 - 2 - 7 - 3 - 1			 ", null, "0", null},
//                {null, "7 - 5 - 8 - 3 - 6			 ", null, "0", "0"},
//                {"5", "3 - 9 - 2 - 4 - 8 - 7			 ", null, "0", null},
//                {null, "6 - 1 - 9 - 7 - 4 - 2			 ", null, "0", "0"},
//                {"6", "4 - 1 - 7 - 9 - 3 - 8 - 6			 ", null, "0", null},
//                {null, "6 - 9 - 1 - 7 - 4 - 2 - 8			 ", null, "0", "0"},
//                {"7", "3 - 8 - 2 - 9 - 6 - 1 - 7 - 4			 ", null, "0", null},
//                {null, "5 - 8 - 1 - 3 - 2 - 6 - 4 - 7			 ", null, "0", "0"},
//                {"8", "2 - 7 - 5 - 8 - 6 - 3 - 1 - 9 - 4			 ", null, "0", null},
//                {null, "7 - 1 - 3 - 9 - 4 - 2 - 5 - 6 - 8			 ", null, "0", "0"}
//            },
//            new String [] {
//                header+"Ítem", header+"Intent", header+"Resposta", header+"<center>Puntuació intent<br>(0-1)", header+"Puntuació ítem"
//            }
//        );
//        
//        
////        boolean colors[][] = new boolean[digitsDirecteTable.getRowCount()][digitsDirecteTable.getColumnCount()];
////        for (boolean[] r: colors)
////            Arrays.fill(r, false);
//
//        //editModel model = new editModel(digitsDirecteTable.getRowCount(),digitsDirecteTable.getColumnCount());
//        digitsDirecteTable.setModel(model);
//        
//        //DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        //centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//
//        
//        digitsDirecteTable.getColumnModel().getColumn(4).setCellRenderer( new CustomRenderer(true) );
//        digitsDirecteTable.getColumnModel().getColumn(0).setCellRenderer( new CustomRenderer(true) );
//        digitsDirecteTable.getColumnModel().getColumn(2).setCellRenderer( new CustomRenderer(true) );
//        
//        for (int i=0; i<digitsDirecteTable.getColumnModel().getColumnCount();i++){
//            digitsDirecteTable.getColumnModel().getColumn(i).setResizable(false);
//            digitsDirecteTable.getColumn(i).setHeaderRenderer(new CustomRenderer(new Color(190,80,80),true));
//        }
//        
//        digitsDirecteTable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        digitsDirecteTable.getTableHeader().setReorderingAllowed(false);
//        
//        
//        
//        
//        
//        for (int i = 0; i<digitsDirecteTable.getRowCount(); i++){
//            digitsDirecteTable.setRowHeight(i, 30);
//        }
//        
//        Action action;
//        action = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int num0 = 0;
//                int num1 = 0;
//                
//                int sumaAnteriors = 1;
//                
//                if (row > 1){
//                    sumaAnteriors = 0;
//                    sumaAnteriors+=Integer.parseInt((String)table.getValueAt(row-1,3));
//                    sumaAnteriors+=Integer.parseInt((String)table.getValueAt(row-2,3));
//                }
//                
//                if (row != 0){
//                    for (int i = 0; i < row; i++){
//                        if (table.getValueAt(i,3).equals("0")) num0++;
//                    }
//                }
//                for (int j = row+1; j < table.getRowCount(); j++){
//                    if (table.getValueAt(j,3).equals("1")) num1++;
//                }
//                int val = Integer.parseInt((String)table.getValueAt(row, 3));
//                if (sumaAnteriors > 0 && num1 < 1) {
//                    if (val == 0) {
//                        table.setValueAt("1", row, 3);
//                        table.setValueAt(table.getValueAt(row, 1), row, 2);
//                    } else {
//                        table.setValueAt("0", row, 3);
//                        table.setValueAt("", row, 2);
//                    }
//                }
//                
//                
//                
//                int sumaTotal = 0;
//                int suma = 0;
//                int span = 0;
//                
//                model.setEditable(4,true);
//                for (int i = 0; i<table.getRowCount(); i++){
//                    sumaTotal += Integer.parseInt((String)table.getValueAt(i, 3));
//                    if (i%2 == 1){
//                        suma = Integer.parseInt((String)table.getValueAt(i, 3))+Integer.parseInt((String)table.getValueAt(i-1, 3));
//                        table.setValueAt(suma+"", i, 4);
//                    }
//                }
//                model.setEditable(4,false);
//                if (sumaAnteriors > 0 && num1 < 1){
//                    puntuacioDirectaDD.setText(sumaTotal+"");
//                    sumaTotal+=num0;
//                    span = sumaTotal%2==0 ? sumaTotal/2 : sumaTotal/2+1;
//                    spanDD.setText(span+"");
//                }
//            }
//        };
//        
//        resetDD.addActionListener(new ActionListener()
//        {
//          public void actionPerformed(ActionEvent e)
//          {
//            for (int i = 0; i<digitsDirecteTable.getRowCount(); i++){
//            digitsDirecteTable.setValueAt("", i, 2);
//            digitsDirecteTable.setValueAt("0", i, 3);
//                if (i%2 == 1){
//                    model.setEditable(4,true);
//                    digitsDirecteTable.setValueAt("0", i, 4);
//                    model.setEditable(4,false);
//                }
//            }
//            spanDD.setText("0");
//            puntuacioDirectaDD.setText("0");
//            percentilDD.setText("0");
//            nssaDD.setText("0");
//          }
//        });
//        
//        
//        
//        ButtonColumn buttonColumn = new ButtonColumn(digitsDirecteTable, action, 3);
//        digitsDirecteTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        digitsDirecteTable.packAll();
//        digitsDirecteTable.getColumn(2).setPreferredWidth(300);
//    }
//    
//    
//    private void initDigitsInversTable() {
//        String header = "<html><font color=\"rgb(255,255,255)\">";
//        CustomModel model = new CustomModel(
//        new Object [][] {
//            {"1", "3 - 1","1 - 3", null, "0", null},
//            {null, "2 - 4","4 - 2", null, "0", "0"},
//            {"2", "4 - 6","6 - 4", null, "0", null},
//            {null, "5 - 7","7 - 5", null, "0", "0"},
//            {"3", "6 - 2 - 9", "9 - 2 - 6", null, "0", null},
//            {null, "4 - 7 - 5", "5 - 7 - 4", null, "0", "0"},
//            {"4", "8 - 2 - 7 - 9", "9 - 7 - 2 - 8", null, "0", null},
//            {null, "4 - 9 - 6 - 8", "8 - 6 - 9 - 4", null, "0", "0"},
//            {"5", "6 - 5 - 8 - 4 - 3", "3 - 4 - 8 - 5 - 6", null, "0", null},
//            {null, "1 - 5 - 4 - 8 - 6", "6 - 8 - 4 - 5 - 1", null, "0", "0"},
//            {"6", "5 - 3 - 7 - 4 - 1 - 8", "8 - 1 - 4 - 7 - 3 - 5", null, "0", null},
//            {null, "7 - 2 - 4 - 8 - 5 - 6", "6 - 5 - 8 - 4 - 2 - 7", null, "0", "0"},
//            {"7", "8 - 1 - 4 - 9 - 3 - 6 - 2", "2 - 6 - 3 - 9 - 4 - 1 - 8", null, "0", null},
//            {null, "4 - 7 - 3 - 9 - 6 - 2 - 8", "8 - 2 - 6 - 9 - 3 - 7 - 4", null, "0", "0"},
//            {"8", "9 - 4 - 3 - 7 - 6 - 2 - 1 - 8", "8 - 1 - 2 - 6 - 7 - 3 - 4 - 9", null, "0", null},
//            {null, "7 - 2 - 8 - 1 - 5 - 6 - 4 - 3", "3 - 4 - 6 - 5 - 1 - 8 - 2 - 7", null, "0", "0"}
//        },
//        new String [] {
//            header+"Ítem", header+"Intent", header+"Resposta correcta", header+"Resposta", header+"<center>Puntuació intent<br>(0-1)", header+"Puntuació ítem"
//        }
//    );
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, false, false, true, true, false
//        };
//        
//        model.setTypes(types);
//        model.setCanEdit(canEdit);
//        
//        digitsInversTable.setModel(model);
//        
//        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        digitsInversTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
//        digitsInversTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
//        digitsInversTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
//        
//        for (int i=0; i<digitsInversTable.getColumnModel().getColumnCount();i++){
//            digitsInversTable.getColumnModel().getColumn(i).setResizable(false);
//            digitsInversTable.getColumn(i).setHeaderRenderer(new CustomRenderer(new Color(190,80,80),true));
//        }
//        
//        digitsInversTable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        digitsInversTable.getTableHeader().setReorderingAllowed(false);
//        
//        for (int i = 0; i<digitsInversTable.getRowCount(); i++){
//            digitsInversTable.setRowHeight(i, 30);
//        }
//        
//        Action action;
//        action = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                model.setEditable(5,true);
//                model.setEditable(4,true);
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 4));
//
//                int sumaAnteriors = 1;
//                
//                if (row > 1){
//                    sumaAnteriors = 0;
//                    sumaAnteriors+=Integer.parseInt((String)table.getValueAt(row-1,4));
//                    sumaAnteriors+=Integer.parseInt((String)table.getValueAt(row-2,4));
//                }
//                
//                int num0 = 0;
//                int num1 = 0;
//                if (row != 0){
//                    for (int i = 0; i < row; i++){
//                        if (table.getValueAt(i,4).equals("0")) num0++;
//                    }
//                }
//                for (int j = row+1; j < table.getRowCount(); j++){
//                    if (table.getValueAt(j,4).equals("1")) num1++;
//                }
//
//                if (sumaAnteriors > 0 && num1 < 1) {
//                    if (val == 0) {
//                        table.setValueAt("1", row, 4);
//                        table.setValueAt(table.getValueAt(row, 2), row, 3);
//                    } else {
//                        table.setValueAt("0", row, 4);
//                        table.setValueAt("", row, 3);
//                    }
//                }
//
//                int sumaTotal = 0;
//                int suma = 0;
//                int span = 0;
//                
//                for (int i = 0; i<table.getRowCount(); i++){
//                    sumaTotal += Integer.parseInt((String)table.getValueAt(i, 4));
//                    if (i%2 == 1){
//                        suma = Integer.parseInt((String)table.getValueAt(i, 4))+Integer.parseInt((String)table.getValueAt(i-1, 4));
//                        table.setValueAt(suma+"", i, 5);
//                        table.setRowHeight(i, 30);
//                    }
//                }
//                model.setEditable(5,false);
//                if (sumaAnteriors > 0 && num1 < 1){
//                    sumaTotal+=num0;
//                    puntuacioDirectaDI.setText(sumaTotal+"");
//                    span = sumaTotal%2==0 ? sumaTotal/2 : sumaTotal/2+1;
//                    spanDI.setText(span+"");
//                    puntuacioDirectaDI.setText(sumaTotal+"");
//                }
//            }
//        };
//        
//        resetDI.addActionListener(new ActionListener()
//        {
//          public void actionPerformed(ActionEvent e)
//          {
//            for (int i = 0; i<digitsInversTable.getRowCount(); i++){
//            digitsInversTable.setValueAt("", i, 3);
//            digitsInversTable.setValueAt("0", i, 4);
//                if (i%2 == 1){
//                    model.setEditable(5,true);
//                    digitsInversTable.setValueAt("0", i, 5);
//                    model.setEditable(5,false);
//                }
//            }
//            spanDI.setText("0");
//            puntuacioDirectaDI.setText("0");
//            percentilDI.setText("0");
//            nssaDI.setText("0");
//          }
//        });
//        
//        ButtonColumn buttonColumn = new ButtonColumn(digitsInversTable, action, 4);
//        digitsInversTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        digitsInversTable.packAll();
//        digitsInversTable.getColumn(3).setPreferredWidth(300);
//    }
//
//    private void initML1ATable() {
//        String header = "<html><font color=\"rgb(255,255,255)\">";
//        CustomModel model = new CustomModel(
//        new Object [][] {
//            {"1", "La Maria", "<html><i>Maria</i> o variant", "0", "0"},
//            {"2", "i el Pedro", "<html><i>Pedro</i> o variant", "0", "0"},
//            {"3", "són amics", "<html><i>amics</i> (en qualsevol context)", "0", "0"},
//            {"4", "des de fa 30", "<html>es requereix <i>trenta</i> (en qualsevol context), no es requereix el nombre específic d'anys", "0", "0"},
//            {"5", "anys", "<html>es requereix <i>anys</i>", "0", "0"},
//            {"6", "Cada", "<html><i>cada</i>, tots (en referencia només als dimarts), o <i>els dimarts</i>", "0", "0"},
//            {"7", "dimarts", "<html>es requereix <i>dimarts</i> (en qualsevol context)", "0", "0"},
//            {"8", "queda", "<html>qualsevol indicació que reflecteixi que els personatges queden intencionadament", "0", "0"},
//            {"9", "per esmorzar", "<html>es requereix <i>esmorzar</i> (en qualsevol context)", "0", "0"},
//            {"10", "al bar", "<html>es requereix <i>bar</i>", "0", "0"},
//            {"11", "Cervanted", "<html>es requereix <i>Cervantes</i> (en qualsevol context)", "0", "0"},
//            {"12", "Després surten junts a passejar", "indicació que els personatges passegen", "0", "0"},
//            {"13", "pel parc", "<html>es requereix <i>parc</i> (en qualsevol context)", "0", "0"},
//            {"14", "del Retiro.", "<html>es requereix <i>Retiro</i> (en qualsevol context)", "0", "0"}
//        },
//        new String [] {
//            header+"Ítem", header+"Detall", header+"Criteri de puntuació", header+"<center>Puntuació<br>Primer record", header+"<center>Puntuació<br>Segon record"
//        }
//    );
//        
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, false, false, true, true
//        };
//        
//        model.setTypes(types);
//        model.setCanEdit(canEdit);
//        
//        //editModel model = new editModel(digitsDirecteTable.getRowCount(),digitsDirecteTable.getColumnCount());
//        ML1ATable.setModel(model);
//        
//        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        ML1ATable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
//        
//        for (int i=0; i<ML1ATable.getColumnModel().getColumnCount();i++){
//            ML1ATable.getColumnModel().getColumn(i).setResizable(false);
//            ML1ATable.getColumn(i).setHeaderRenderer(new CustomRenderer(new Color(190,80,80),true));
//        }
//        
//        ML1ATable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        ML1ATable.getTableHeader().setReorderingAllowed(false);
//        
//        for (int i = 0; i<ML1ATable.getRowCount(); i++){
//            ML1ATable.setRowHeight(i, 30);
//        }
//        
//        Action action1;
//        action1 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 3));
//                table.setValueAt(val == 0 ? "1" : "0", row, 3);
//                
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    sumaTotal += Integer.parseInt((String)table.getValueAt(i, 3));
//                }
//                historiaAprimerTotal.setText(sumaTotal+"");
//                ML1Total.setText(""+(Integer.parseInt(historiaBprimerTotal.getText())+Integer.parseInt(historiaAprimerTotal.getText())+Integer.parseInt(historiaAsegonTotal.getText())));
//            }
//        };
//        Action action2;
//        action2 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 4));
//                table.setValueAt(val == 0 ? "1" : "0", row, 4);
//                
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    sumaTotal += Integer.parseInt((String)table.getValueAt(i, 4));
//                }
//                historiaAsegonTotal.setText(sumaTotal+"");
//                ML1Total.setText(""+(Integer.parseInt(historiaBprimerTotal.getText())+Integer.parseInt(historiaAprimerTotal.getText())+Integer.parseInt(historiaAsegonTotal.getText())));
//            }
//        };
//        
//        ButtonColumn buttonColumn = new ButtonColumn(ML1ATable, action1, 3);
//        ButtonColumn buttonColumn2 = new ButtonColumn(ML1ATable, action2, 4);
//        ML1ATable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        ML1ATable.packAll();
//    }
//
//    private void initML1BTable() {
//        String header = "<html><font color=\"rgb(255,255,255)\">";
//        CustomModel model = new CustomModel(
//        new Object [][] {
//            {"1", "Elena", "<html><i>Elena</i> o variant", "0"},
//            {"2", "Pérez,", "<html>es requereix<i>Pérez</i>","0"},
//            {"3", "del sud", "<html><i>sud</i> (en qualsevol context)", "0"},
//            {"4", "de Madrid,", "<html><i>Madrid</i> (en qualsevol context), no es requereix el nombre específic d'anys", "0"},
//            {"5", "treballadora", "indicació que tenia una feina", "0"},
//            {"6", "com a cuinera", "<html>es requereix <i>cuinera</i> o variant", "0"},
//            {"7", "al menjador", "<html>es requereix <i>menjador</i>", "0"},
//            {"8", "d'una escola,", "<html>es requereix <i>escola</i> o <i>col·legi</i>", "0"},
//            {"9", "va denunciar", "<html>indicació de denuncia o reclamació davant l'autoritat (en qualsevol context)", "0"},
//            {"10", "a la comisseria", "<html>indicació de lloc de treball de la policia, oficina policial", "0"},
//            {"11", "de policia", "<html><i>policia</i> (en qualsevol context)", "0"},
//            {"12", "que habia estat assaltada", "indicació d'assalt, atracament", "0"},
//            {"13", "la nit anterior", "indicació que l'assalt va ser la nit anterior", "0"},
//            {"14", "al carrer Padilla,", "<html>carrer <i>Padilla</i> (en qualsevol context)", "0"},
//            {"15", "i que li habien robat", "<html>indicació que la van robar", "0"},
//            {"16", "56 euros.,", "<html>indicació que va ser substreta una quantitat entre 49-60 euros", "0"},
//            {"17", "Tenia quatre", "<html>es requereix <i>quatre</i> juntament a la idea que eren seus", "0"},
//            {"18", "nens petits", "<html>es requereix <i>nens</i> o variant", "0"},
//            {"19", "no habia pogut pagar el lloguer", "<html>indicació que reflecteixi que el lloguer no havia estat pagat", "0"},
//            {"20", "i portada dos dies", "<html>es requereix <i>dos dies</i> o variant que contingui<i>dos</i>", "0"},
//            {"21", "sense menjar.", "<html>indicació que els nens o la familia no havien menjat", "0"},
//            {"22", "La policia,", "<html>indicació de policia, un o més agents (en qualsevol context)", "0"},
//            {"23", "commoguda per la història de la dona", "<html>indicació que la història va provocar compassió", "0"},
//            {"24", "va realitzar una col·lecta", "<html>indicació que es van recollir diners o menjar", "0"},
//            {"25", "per ajudar-la.", "<html>indicació que els diners o el menjar recollits eren per a ella o pels seus fills", "0"}
//        },
//        new String [] {
//            header+"Ítem", header+"Detall", header+"Criteri de puntuació", header+"Puntuació"
//        }
//    );
//        
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, false, false, true
//        };
//        
//        model.setTypes(types);
//        model.setCanEdit(canEdit);
//        
//        //editModel model = new editModel(digitsDirecteTable.getRowCount(),digitsDirecteTable.getColumnCount());
//        ML1BTable.setModel(model);
//        
//        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        ML1BTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
//        
//        for (int i=0; i<ML1BTable.getColumnModel().getColumnCount();i++){
//            ML1BTable.getColumnModel().getColumn(i).setResizable(false);
//            ML1BTable.getColumn(i).setHeaderRenderer(new CustomRenderer(new Color(190,80,80),true));
//        }
//        ML1BTable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        ML1BTable.getTableHeader().setReorderingAllowed(false);
//        
//        for (int i = 0; i<ML1BTable.getRowCount(); i++){
//            ML1BTable.setRowHeight(i, 30);
//        }
//        
//        Action action1;
//        action1 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 3));
//                table.setValueAt(val == 0 ? "1" : "0", row, 3);
//                
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    sumaTotal += Integer.parseInt((String)table.getValueAt(i, 3));
//                }
//                historiaBprimerTotal.setText(sumaTotal+"");
//                ML1Total.setText(""+(sumaTotal+Integer.parseInt(historiaAprimerTotal.getText())+Integer.parseInt(historiaAsegonTotal.getText())));
//            }
//        };
//        
//        ButtonColumn buttonColumn = new ButtonColumn(ML1BTable, action1, 3);
//        ML1BTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        ML1BTable.packAll();
//    }
//    
//    private void initML2ATable() {
//        String header = "<html><font color=\"rgb(255,255,255)\">";
//        CustomModel model = new CustomModel(
//        new Object [][] {
//            {"1", "La Maria", "<html><i>Maria</i> o variant", "0"},
//            {"2", "i el Pedro", "<html><i>Pedro</i> o variant", "0"},
//            {"3", "són amics", "<html><i>amics</i> (en qualsevol context)", "0"},
//            {"4", "des de fa 30", "<html>es requereix <i>trenta</i> (en qualsevol context), no es requereix el nombre específic d'anys", "0"},
//            {"5", "anys", "<html>es requereix <i>anys</i>", "0"},
//            {"6", "Cada", "<html><i>cada</i>, tots (en referencia només als dimarts), o <i>els dimarts</i>", "0"},
//            {"7", "dimarts", "<html>es requereix <i>dimarts</i> (en qualsevol context)", "0", "0"},
//            {"8", "queda", "<html>qualsevol indicació que reflecteixi que els personatges queden intencionadament", "0"},
//            {"9", "per esmorzar", "<html>es requereix <i>esmorzar</i> (en qualsevol context)", "0"},
//            {"10", "al bar", "<html>es requereix <i>bar</i>", "0"},
//            {"11", "Cervanted", "<html>es requereix <i>Cervantes</i> (en qualsevol context)", "0"},
//            {"12", "Després surten junts a passejar", "indicació que els personatges passegen", "0"},
//            {"13", "pel parc", "<html>es requereix <i>parc</i> (en qualsevol context)", "0"},
//            {"14", "del Retiro.", "<html>es requereix <i>Retiro</i> (en qualsevol context)", "0"}
//        },
//        new String [] {
//            header+"Ítem", header+"Detall", header+"Criteri de puntuació", header+"Puntuació"
//        }
//    );
//        
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, false, false, true
//        };
//        
//        model.setTypes(types);
//        model.setCanEdit(canEdit);
//        
//        //editModel model = new editModel(digitsDirecteTable.getRowCount(),digitsDirecteTable.getColumnCount());
//        ML2ATable.setModel(model);
//        
//        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        ML2ATable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
//        
//        for (int i=0; i<ML2ATable.getColumnModel().getColumnCount();i++){
//            ML2ATable.getColumnModel().getColumn(i).setResizable(false);
//            ML2ATable.getColumn(i).setHeaderRenderer(new CustomRenderer(new Color(190,80,80),true));
//        }
//        
//        ML2ATable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        ML2ATable.getTableHeader().setReorderingAllowed(false);
//        
//        for (int i = 0; i<ML2ATable.getRowCount(); i++){
//            ML2ATable.setRowHeight(i, 30);
//        }
//        
//        Action action1;
//        action1 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 3));
//                table.setValueAt(val == 0 ? "1" : "0", row, 3);
//                
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    sumaTotal += Integer.parseInt((String)table.getValueAt(i, 3));
//                }
//                historiaAprimerTotal2.setText(sumaTotal+"");
//                ML2Total.setText(""+sumaTotal+historiaBprimerTotal2.getText());
//            }
//        };
//        
//        ButtonColumn buttonColumn = new ButtonColumn(ML2ATable, action1, 3);
//        ML2ATable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        ML2ATable.packAll();
//    }
//
    private void initTabs() {
        int numPaginesTotal = ((Test)tabbedPanel.getSelectedComponent()).getNumPaginesTotal();
        paginaLabel2.setText("/ "+(numPaginesTotal)+"");
        tabbedPanel.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                
                if (numPaginesTotal > 1){
                    anteriorBtn.setEnabled(false);
                    seguentBtn.setEnabled(true);
                }else {
                    anteriorBtn.setEnabled(false);
                    seguentBtn.setEnabled(false);
                }
                paginaLabel.setText("1");
                paginaLabel2.setText("/ "+(numPaginesTotal)+"");
                
            }
        });
    }
//
//    private void initML2BTable() {
//        String header = "<html><font color=\"rgb(255,255,255)\">";
//        CustomModel model = new CustomModel(
//            new Object [][] {
//                {"1", "Elena", "<html><i>Elena</i> o variant", "0"},
//                {"2", "Pérez,", "<html>es requereix<i>Pérez</i>","0"},
//                {"3", "del sud", "<html><i>sud</i> (en qualsevol context)", "0"},
//                {"4", "de Madrid,", "<html><i>Madrid</i> (en qualsevol context), no es requereix el nombre específic d'anys", "0"},
//                {"5", "treballadora", "indicació que tenia una feina", "0"},
//                {"6", "com a cuinera", "<html>es requereix <i>cuinera</i> o variant", "0"},
//                {"7", "al menjador", "<html>es requereix <i>menjador</i>", "0"},
//                {"8", "d'una escola,", "<html>es requereix <i>escola</i> o <i>col·legi</i>", "0"},
//                {"9", "va denunciar", "<html>indicació de denuncia o reclamació davant l'autoritat (en qualsevol context)", "0"},
//                {"10", "a la comisseria", "<html>indicació de lloc de treball de la policia, oficina policial", "0"},
//                {"11", "de policia", "<html><i>policia</i> (en qualsevol context)", "0"},
//                {"12", "que habia estat assaltada", "indicació d'assalt, atracament", "0"},
//                {"13", "la nit anterior", "indicació que l'assalt va ser la nit anterior", "0"},
//                {"14", "al carrer Padilla,", "<html>carrer <i>Padilla</i> (en qualsevol context)", "0"},
//                {"15", "i que li habien robat", "<html>indicació que la van robar", "0"},
//                {"16", "56 euros.,", "<html>indicació que va ser substreta una quantitat entre 49-60 euros", "0"},
//                {"17", "Tenia quatre", "<html>es requereix <i>quatre</i> juntament a la idea que eren seus", "0"},
//                {"18", "nens petits", "<html>es requereix <i>nens</i> o variant", "0"},
//                {"19", "no habia pogut pagar el lloguer", "<html>indicació que reflecteixi que el lloguer no havia estat pagat", "0"},
//                {"20", "i portada dos dies", "<html>es requereix <i>dos dies</i> o variant que contingui<i>dos</i>", "0"},
//                {"21", "sense menjar.", "<html>indicació que els nens o la familia no havien menjat", "0"},
//                {"22", "La policia,", "<html>indicació de policia, un o més agents (en qualsevol context)", "0"},
//                {"23", "commoguda per la història de la dona", "<html>indicació que la història va provocar compassió", "0"},
//                {"24", "va realitzar una col·lecta", "<html>indicació que es van recollir diners o menjar", "0"},
//                {"25", "per ajudar-la.", "<html>indicació que els diners o el menjar recollits eren per a ella o pels seus fills", "0"}
//            },
//            new String [] {
//                header+"Ítem", header+"Detall", header+"Criteri de puntuació", header+"Puntuació"
//            }
//        );
//        
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, false, false, true
//        };
//        
//        model.setTypes(types);
//        model.setCanEdit(canEdit);
//        
//        //editModel model = new editModel(digitsDirecteTable.getRowCount(),digitsDirecteTable.getColumnCount());
//        ML2BTable.setModel(model);
//        
//        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        ML2BTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
//        
//        for (int i=0; i<ML2BTable.getColumnModel().getColumnCount();i++){
//            ML2BTable.getColumnModel().getColumn(i).setResizable(false);
//            ML2BTable.getColumn(i).setHeaderRenderer(new CustomRenderer(new Color(190,80,80),true));
//        }
//        
//        ML2BTable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        ML2BTable.getTableHeader().setReorderingAllowed(false);
//        
//        for (int i = 0; i<ML2BTable.getRowCount(); i++){
//            ML2BTable.setRowHeight(i, 30);
//        }
//        
//        Action action1;
//        action1 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 3));
//                table.setValueAt(val == 0 ? "1" : "0", row, 3);
//                
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    sumaTotal += Integer.parseInt((String)table.getValueAt(i, 3));
//                }
//                historiaBprimerTotal2.setText(sumaTotal+"");
//                ML2Total.setText(""+(sumaTotal+Integer.parseInt(historiaAprimerTotal2.getText())));
//            }
//        };
//        
//        ButtonColumn buttonColumn = new ButtonColumn(ML2BTable, action1, 3);
//        ML2BTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        ML2BTable.packAll();
//    }
//
//    private void initML2RecTable() {
//        String header = "<html><font color=\"rgb(255,255,255)\">";
//        String si = "<html>N&nbsp;&nbsp;&nbsp;<b><font color=\"rgb(80,130,190)\">   S</font></b>";
//        String no = "<html><font color=\"rgb(80,130,190)\"><b>N   </b></font>&nbsp;&nbsp;&nbsp;S";
//        CustomModel model = new CustomModel(
//            new Object [][] {
//                {"1", "Una de les persones de la història, es deia Maria?", si, "0"},
//                {"2", "L'altra persona, es deia Pedro?", si,"0"},
//                {"3", "Es deia a la història que estaven casats?", no, "0"},
//                {"4", "Eren amics des de feia 20 anys?", no, "0"},
//                {"5", "Quedaven cada dimarts?", si, "0"},
//                {"6", "Menjaven al bar El Retiro?", no, "0"},
//                {"7", "Desrés d'esmorzar, anaven a observar ocells a casa del Pedro?", no, "0"},
//                {"8", "Passejaven pel parc del Retiro?", si, "0"}
//            },
//            new String [] {
//                header+"Ítem", header+"Detall", header+"Resposta", header+"Puntuació"
//            }
//        );
//        
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, false, false, true
//        };
//        
//        model.setTypes(types);
//        model.setCanEdit(canEdit);
//        
//        ML2RecTableA.setModel(model);
//        
//        CustomModel model2 = new CustomModel(
//            new Object [][] {
//                {"9", "La dona, es deia Diana Pérez?", no,"0"},
//                {"10", "Vivia al sud de Madrid?", si, "0"},
//                {"11", "La dona era cuinera?", si, "0"},
//                {"12", "Traballava a un restaurant?", no, "0"},
//                {"13", "Tenia quatre fills?", si, "0"},
//                {"14", "Els fills eren adolescents?", no, "0"},
//                {"15", "Va tenir lloc el robatori al carrer Reial?", no, "0"},
//                {"16", "Va dir la dona que li havien robat dos dies abans?", no, "0"},
//                {"17", "Va denunciar la dona el robatori a comissaria?", si, "0"},
//                {"18", "Van robar a la dona 75 euros?", no, "0"},
//                {"19", "Havia estat la família sense menjar durant quatre dies?", no, "0"},
//                {"20", "La dona, havia de pagar el lloguer?", si, "0"},
//                {"21", "La policia va detenir el lladre?", no, "0"},
//                {"22", "La policia es va commoure amb la història de la dona?", si, "0"},
//                {"23", "¿La policia va organitzar una col·lecta?", si, "0"}
//            },
//            new String [] {
//                header+"Ítem", header+"Detall", header+"Resposta", header+"Puntuació"
//            }
//        );
//        
//        model2.setTypes(types);
//        model2.setCanEdit(canEdit);
//        
//        ML2RecTableB.setModel(model2);
//        
//        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        ML2RecTableA.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
//        ML2RecTableA.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
//        
//        for (int i=0; i<ML2RecTableA.getColumnModel().getColumnCount();i++){
//            ML2RecTableA.getColumnModel().getColumn(i).setResizable(false);
//            ML2RecTableA.getColumn(i).setHeaderRenderer(new CustomRenderer(new Color(190,80,80),true));
//        }
//        
//        ML2RecTableA.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        ML2RecTableA.getTableHeader().setReorderingAllowed(false);
//        
//        for (int i = 0; i<ML2RecTableA.getRowCount(); i++){
//            ML2RecTableA.setRowHeight(i, 30);
//        }
//        
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        ML2RecTableB.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
//        ML2RecTableB.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
//        
//        for (int i=0; i<ML2RecTableB.getColumnModel().getColumnCount();i++){
//            ML2RecTableB.getColumnModel().getColumn(i).setResizable(false);
//            ML2RecTableB.getColumn(i).setHeaderRenderer(new CustomRenderer(new Color(190,80,80),true));
//        }
//        
//        ML2RecTableB.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        ML2RecTableB.getTableHeader().setReorderingAllowed(false);
//        
//        for (int i = 0; i<ML2RecTableB.getRowCount(); i++){
//            ML2RecTableB.setRowHeight(i, 30);
//        }
//        
//        
//        Action action1;
//        action1 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 3));
//                table.setValueAt(val == 0 ? "1" : "0", row, 3);
//                
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    sumaTotal += Integer.parseInt((String)table.getValueAt(i, 3));
//                }
//                
//                System.out.println(table.getRowCount());
//                if (table.getRowCount() <= 8){
//                    totalRecA.setText(sumaTotal+"");
//                }else{
//                    totalRecB.setText(sumaTotal+"");
//                }
//                totalRec.setText(""+(Integer.parseInt(totalRecA.getText())+Integer.parseInt(totalRecB.getText())));
//            }
//        };
//        
//        Action action2;
//        action2 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 3));
//                table.setValueAt(val == 0 ? "1" : "0", row, 3);
//                
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    sumaTotal += Integer.parseInt((String)table.getValueAt(i, 3));
//                }
//                
//                if (table.getRowCount() == 8){
//                    totalRecA.setText(sumaTotal+"");
//                }else{
//                    totalRecB.setText(sumaTotal+"");
//                }
//                totalRec.setText(""+(Integer.parseInt(totalRecA.getText())+Integer.parseInt(totalRecB.getText())));
//            }
//        };
//        
//        ButtonColumn buttonColumn = new ButtonColumn(ML2RecTableA, action1, 3);
//        ML2RecTableA.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        ML2RecTableA.packAll();
//        
//        ButtonColumn buttonColumn2 = new ButtonColumn(ML2RecTableB, action1, 3);
//        ML2RecTableB.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        ML2RecTableB.packAll();
//    }
//
//    private void initBNTATable() {
//        CustomModel model = new CustomModel(
//            new Object [][] {
//                {"1", "Llit(un moble)","","0","0"},
//                {"2", "Escombra (serveix per netejar),","","0","0"},
//                {"3", "Banc (serveix per seure)","","0","0"},
//                {"4", "Pop (animal marí)","","0","0"},
//                {"5", "Bolet (quelcom per menjar)","","0","0"},
//                {"6", "Helicòpter (serveix per viatjar per l'aire)","","0","0"},
//                {"7", "Corona de flors","", "0","0"},
//                {"8", "Pinces (utensili)","","0","0"},
//                {"9", "Compàs (serveix per dibuixar)","","0","0"},
//                {"10", "Magdalena (quelcom per menjar)","","0","0"},
//                {"11", "Balda (part d'una porta)","","0","0"},
//                {"12", "Canoa (s'utlititza a l'aigua)","","0","0"},
//                {"13", "Pelicà (una au)","","0","0"},
//                {"14", "Unicorn (animal mític)","","0","0"},
//                {"15", "Transportador (serveix per mesurar angles)","","0","0"}
//            },
//            new String [] {
//                "", "<html><b><p style=\"font-size:14px;\"><font color=\"rgb(65,110,160)\">Short Form - Version A","Resposta pacient", " Correctes espontàniament", " Correctes amb ajuda semàntica"
//            }
//        );
//        
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, false, true ,true, true
//        };
//
//        boolean matrix[][] = new boolean[model.getColumnCount()][model.getRowCount()];
//
//        int j = 0;
//
//        for (boolean[] r: matrix) {
//            Arrays.fill(r, canEdit[j]);
//            j++;
//        }
//
//        model.setCanEdit(canEdit);
//
//        model.setTypes(types);
//
//        model.setCanEditMatrix(matrix);
//
//        model.setCustom(true);
//
//
//        
//        BNTATable.setModel(model);
//        
//        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        BNTATable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
//        BNTATable.getColumn(1).setHeaderRenderer(centerRenderer);
//        
//        TableCellRenderer headerRenderer = new VerticalTableHeaderCellRenderer();
//        for (int i=3; i<BNTATable.getColumnModel().getColumnCount(); i++){
//            BNTATable.getColumn(i).setHeaderRenderer(headerRenderer);
//        }
//        
//        if (BNTATable.getColumnModel().getColumnCount() > 0) {
//            BNTATable.getColumnModel().getColumn(0).setResizable(false);
//            BNTATable.getColumnModel().getColumn(1).setResizable(false);
//            BNTATable.getColumnModel().getColumn(2).setResizable(false);
//            BNTATable.getColumnModel().getColumn(3).setResizable(false);
//            BNTATable.getColumnModel().getColumn(4).setResizable(false);
//        }
//        BNTATable.getTableHeader().setReorderingAllowed(false);
//        
//        BNTATable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        for (int i = 0; i<BNTATable.getRowCount(); i++){
//            BNTATable.setRowHeight(i, 30);
//        }
//        
//        Action action1;
//        action1 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 3));
//
//                CustomModel model = (CustomModel)table.getModel();
//
//                if (val == 0){
//                    table.setValueAt("1",row,3);
//                    table.setValueAt("",row,4);
//                    model.setEditable(4,row,false);
//                } else {
//                    table.setValueAt("0",row,3);
//                    model.setEditable(4,row,true);
//                    table.setValueAt("0",row,4);
//                }
//
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    if (table.getValueAt(i, 3).equals("0") || table.getValueAt(i, 3).equals("1")) {
//                        sumaTotal += Integer.parseInt((String) table.getValueAt(i, 3));
//                    }
//                }
//                correctesBntA.setText(sumaTotal+"");
//                totalBntA.setText(""+(sumaTotal+Integer.parseInt(semanticaBntA.getText())));
//            }
//        };
//        
//        Action action2;
//        action2 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 4));
//
//                CustomModel model = (CustomModel)table.getModel();
//
//                if (val == 0){
//                    table.setValueAt("1",row,4);
//                    table.setValueAt("",row,3);
//                    model.setEditable(3,row,false);
//                } else {
//                    table.setValueAt("0",row,4);
//                    model.setEditable(3,row,true);
//                    table.setValueAt("0",row,3);
//                }
//                
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    if (table.getValueAt(i, 4).equals("0") || table.getValueAt(i, 4).equals("1")) {
//                        sumaTotal += Integer.parseInt((String) table.getValueAt(i, 4));
//                    }
//                }
//                semanticaBntA.setText(sumaTotal+"");
//                totalBntA.setText(""+(sumaTotal+Integer.parseInt(correctesBntA.getText())));
//            }
//        };
//        
//        ButtonColumn buttonColumn = new ButtonColumn(BNTATable, action1, 3);
//        ButtonColumn buttonColumn2 = new ButtonColumn(BNTATable, action2, 4);
//        BNTATable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        BNTATable.packAll();
//    }
//
//    private void initBNTBTable() {
//        CustomModel model = new CustomModel(
//            new Object [][] {
//                {"1", "Arbre (creix al camp)","","0","0"},
//                {"2", "Flor (creix al jardí)","","0","0"},
//                {"3", "Xiulet (serveix per bufar)","","0","0"},
//                {"4", "Escales mecàniques (serveix per pujar)","","0","0"},
//                {"5", "Penjador (es troba en un armari)","","0","0"},
//                {"6", "Morrió (s'utilitza pels gossos)","","0","0"},
//                {"7", "Volcà (un tipus de muntanya)","", "0","0"},
//                {"8", "Gla (prové d'un arbre)","","0","0"},
//                {"9", "Cactus (quelcom que creix)","","0","0"},
//                {"10", "Arpa (intrument musical)","","0","0"},
//                {"11", "Dard (serveix per llançar)","","0","0"},
//                {"12", "Soga (per penjar)","","0","0"},
//                {"13", "Xanques (s'usen per caminar més alt)","","0","0"},
//                {"14", "Esfinx (es troba a Egipte)","","0","0"},
//                {"15", "Pèrgola (s'usa al jardí)","","0","0"}
//            },
//            new String [] {
//                "", "<html><b><p style=\"font-size:14px;\"><font color=\"rgb(65,110,160)\">Short Form - Version B", "Resposta pacient" ," Correctes espontàniament", " Correctes amb ajuda semàntica"
//            }
//        );
//        
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, false, true, true, true
//        };
//
//        boolean matrix[][] = new boolean[model.getColumnCount()][model.getRowCount()];
//
//        int j = 0;
//
//        for (boolean[] r: matrix) {
//            Arrays.fill(r, canEdit[j]);
//            j++;
//        }
//
//        model.setCanEdit(canEdit);
//
//        model.setTypes(types);
//
//        model.setCanEditMatrix(matrix);
//
//        model.setCustom(true);
//        
//        BNTBTable.setModel(model);
//        
//        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        BNTBTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
//        BNTBTable.getColumn(1).setHeaderRenderer(centerRenderer);
//        
//        TableCellRenderer headerRenderer = new VerticalTableHeaderCellRenderer();
//        for (int i=3; i<BNTBTable.getColumnModel().getColumnCount(); i++){
//            BNTBTable.getColumn(i).setHeaderRenderer(headerRenderer);
//        }
//        
//        if (BNTBTable.getColumnModel().getColumnCount() > 0) {
//            BNTBTable.getColumnModel().getColumn(0).setResizable(false);
//            BNTBTable.getColumnModel().getColumn(1).setResizable(false);
//            BNTBTable.getColumnModel().getColumn(2).setResizable(false);
//            BNTBTable.getColumnModel().getColumn(3).setResizable(false);
//            BNTBTable.getColumnModel().getColumn(4).setResizable(false);
//        }
//        BNTBTable.getTableHeader().setReorderingAllowed(false);
//        BNTBTable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        for (int i = 0; i<BNTBTable.getRowCount(); i++){
//            BNTBTable.setRowHeight(i, 30);
//        }
//        
//        Action action1;
//        action1 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 3));
//
//                CustomModel model = (CustomModel)table.getModel();
//
//                if (val == 0){
//                    table.setValueAt("1",row,3);
//                    table.setValueAt("",row,4);
//                    model.setEditable(4,row,false);
//                } else {
//                    table.setValueAt("0",row,3);
//                    model.setEditable(4,row,true);
//                    table.setValueAt("0",row,4);
//                }
//
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    if (table.getValueAt(i, 3).equals("0") || table.getValueAt(i, 3).equals("1")) {
//                        sumaTotal += Integer.parseInt((String) table.getValueAt(i, 3));
//                    }
//                }
//
//                correctesBntB.setText(sumaTotal+"");
//                totalBntB.setText(""+(sumaTotal+Integer.parseInt(semanticaBntB.getText())));
//            }
//        };
//        
//        Action action2;
//        action2 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 4));
//
//                CustomModel model = (CustomModel)table.getModel();
//
//                if (val == 0){
//                    table.setValueAt("1",row,4);
//                    table.setValueAt("",row,3);
//                    model.setEditable(3,row,false);
//                } else {
//                    table.setValueAt("0",row,4);
//                    model.setEditable(3,row,true);
//                    table.setValueAt("0",row,3);
//                }
//
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    if (table.getValueAt(i, 4).equals("0") || table.getValueAt(i, 4).equals("1")) {
//                        sumaTotal += Integer.parseInt((String) table.getValueAt(i, 4));
//                    }
//                }
//
//                semanticaBntB.setText(sumaTotal+"");
//                totalBntB.setText(""+(sumaTotal+Integer.parseInt(correctesBntB.getText())));
//            }
//        };
//        
//        ButtonColumn buttonColumn = new ButtonColumn(BNTBTable, action1, 3);
//        ButtonColumn buttonColumn2 = new ButtonColumn(BNTBTable, action2, 4);
//        BNTBTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        BNTBTable.packAll();
//    }
//
//    private void initBNTCTable() {
//        CustomModel model = new CustomModel(
//            new Object [][] {
//                {"1", "Casa (tipus d'edifici)","","0","0"},
//                {"2", "Respall de dents (s'usa a la boca)","","0","0"},
//                {"3", "Cargol (un animal)","","0","0"},
//                {"4", "Cadira de rodes (es troba a l'hospital)","","0","0"},
//                {"5", "Llapis (serveix per escriure)","","0","0"},
//                {"6", "Màscara (part d'una disfressa)","","0","0"},
//                {"7", "Acordió (instrument musical)","", "0","0"},
//                {"8", "Piràmide (es troba a Egipte)","","0","0"},
//                {"9", "Armònica (instrument musical)","","0","0"},
//                {"10", "Globus terraqui (un tipus de mapa)","","0","0"},
//                {"11", "Trípode (el fan servir els fotògrafs)","","0","0"},
//                {"12", "Pergamí (un document)","","0","0"},
//                {"13", "Jou (s'utilitza per a animals de tir)","","0","0"},
//                {"14", "Estetoscopi (el fan servir els metges)","","0","0"},
//                {"15", "Àbac (serveix per comptar)","","0","0"}
//            },
//            new String [] {
//                "", "<html><b><p style=\"font-size:14px;\"><font color=\"rgb(65,110,160)\">Short Form - Version C","Resposta pacient", " Correctes espontàniament", " Correctes amb ajuda semàntica"
//            }
//        );
//        
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, false, true, true, true
//        };
//
//        boolean matrix[][] = new boolean[model.getColumnCount()][model.getRowCount()];
//
//        int j = 0;
//
//        for (boolean[] r: matrix) {
//            Arrays.fill(r, canEdit[j]);
//            j++;
//        }
//
//        model.setCanEdit(canEdit);
//
//        model.setTypes(types);
//
//        model.setCanEditMatrix(matrix);
//
//        model.setCustom(true);
//        
//        BNTCTable.setModel(model);
//        
//        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        BNTCTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
//        BNTCTable.getColumn(1).setHeaderRenderer(centerRenderer);
//        
//        TableCellRenderer headerRenderer = new VerticalTableHeaderCellRenderer();
//        for (int i=3; i<BNTCTable.getColumnModel().getColumnCount(); i++){
//            BNTCTable.getColumn(i).setHeaderRenderer(headerRenderer);
//        }
//        
//        if (BNTCTable.getColumnModel().getColumnCount() > 0) {
//            BNTCTable.getColumnModel().getColumn(0).setResizable(false);
//            BNTCTable.getColumnModel().getColumn(1).setResizable(false);
//            BNTCTable.getColumnModel().getColumn(2).setResizable(false);
//            BNTCTable.getColumnModel().getColumn(3).setResizable(false);
//            BNTCTable.getColumnModel().getColumn(4).setResizable(false);
//        }
//        BNTCTable.getTableHeader().setReorderingAllowed(false);
//        BNTCTable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        for (int i = 0; i<BNTCTable.getRowCount(); i++){
//            BNTCTable.setRowHeight(i, 30);
//        }
//        
//        Action action1;
//        action1 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 3));
//
//                CustomModel model = (CustomModel)table.getModel();
//
//                if (val == 0){
//                    table.setValueAt("1",row,3);
//                    table.setValueAt("",row,4);
//                    model.setEditable(4,row,false);
//                } else {
//                    table.setValueAt("0",row,3);
//                    model.setEditable(4,row,true);
//                    table.setValueAt("0",row,4);
//                }
//
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    if (table.getValueAt(i, 3).equals("0") || table.getValueAt(i, 3).equals("1")) {
//                        sumaTotal += Integer.parseInt((String) table.getValueAt(i, 3));
//                    }
//                }
//
//                correctesBntC.setText(sumaTotal+"");
//                totalBntC.setText(""+(sumaTotal+Integer.parseInt(semanticaBntC.getText())));
//            }
//        };
//        
//        Action action2;
//        action2 = new AbstractAction()
//        {
//            public void actionPerformed(ActionEvent e)
//            {
//                JTable table = (JTable)e.getSource();
//                int row = Integer.parseInt(e.getActionCommand());
//                int val = Integer.parseInt((String)table.getValueAt(row, 4));
//
//                CustomModel model = (CustomModel)table.getModel();
//
//                if (val == 0){
//                    table.setValueAt("1",row,4);
//                    table.setValueAt("",row,3);
//                    model.setEditable(3,row,false);
//                } else {
//                    table.setValueAt("0",row,4);
//                    model.setEditable(3,row,true);
//                    table.setValueAt("0",row,3);
//                }
//
//                int sumaTotal = 0;
//                for (int i = 0; i<table.getRowCount(); i++){
//                    if (table.getValueAt(i, 4).equals("0") || table.getValueAt(i, 4).equals("1")) {
//                        sumaTotal += Integer.parseInt((String) table.getValueAt(i, 4));
//                    }
//                }
//
//                semanticaBntC.setText(sumaTotal+"");
//                totalBntC.setText(""+(sumaTotal+Integer.parseInt(correctesBntC.getText())));
//            }
//        };
//        
//        ButtonColumn buttonColumn = new ButtonColumn(BNTCTable, action1, 3);
//        ButtonColumn buttonColumn2 = new ButtonColumn(BNTCTable, action2, 4);
//        BNTCTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        BNTCTable.packAll();
//    }
//
//    private void initHashDD() {
//        taulaDigitsDD = new HashMap<>();
//        List<Object> auxList;
//        HashMap<Integer, List<Object>> auxMap = new HashMap<>();
//        
//        auxList = Arrays.asList(2, "<1");
//        auxMap.put(0, auxList);
//        auxMap.put(1, auxList);
//        auxMap.put(2, auxList);
//        auxMap.put(3, auxList);
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(4, auxList);
//        auxList = Arrays.asList(9, "29-40");
//        auxMap.put(5, auxList);
//        auxList = Arrays.asList(11, "60-71");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(14, "90-94");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(15, "95-97");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(18, ">99");
//        auxMap.put(9, auxList);
//        taulaDigitsDD.put("50-56", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(4, auxList);
//        auxList = Arrays.asList(10, "41-59");
//        auxMap.put(5, auxList);
//        auxList = Arrays.asList(12, "72-81");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(16, "98");
//        auxMap.put(8, auxList);
//        taulaDigitsDD.put("57-59", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(4, auxList);
//        taulaDigitsDD.put("60-62", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(13, "82-89");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(15, "95-97");
//        auxMap.put(7, auxList);
//        taulaDigitsDD.put("63-65", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(4, "2");
//        auxMap.put(3, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(4, auxList);
//        auxList = Arrays.asList(17, "99");
//        auxMap.put(8, auxList);
//        taulaDigitsDD.put("66-68", new HashMap(auxMap));
//        
//        taulaDigitsDD.put("69-71", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(4, auxList);
//        taulaDigitsDD.put("72-74", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(3, "1");
//        auxMap.put(3, auxList);
//        auxList = Arrays.asList(16, "1");
//        auxMap.put(7, auxList);
//        taulaDigitsDD.put("75-77", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(17, "99");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(18, ">99");
//        auxMap.put(8, auxList);
//        taulaDigitsDD.put("78-80", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(2, "<1");
//        auxMap.put(3, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(4, auxList);
//        auxList = Arrays.asList(11, "60-71");
//        auxMap.put(5, auxList);
//        auxList = Arrays.asList(18, ">99");
//        auxMap.put(7, auxList);
//        taulaDigitsDD.put("81-90", new HashMap(auxMap));
//        
//    }
//
//    private void calcularDigits(boolean digits) {
//        int edatPacient = pacientActual.getEdat();
//        String edat = "";
//        if (edatPacient<=56){
//            edat = "50-56";
//        }
//        else if (edatPacient>=57 && edatPacient<=59){
//            edat = "57-59";
//        }
//        else if (edatPacient>=60 && edatPacient<=62){
//            edat = "60-62";
//        }
//        else if (edatPacient>=63 && edatPacient<=65){
//            edat = "63-65";
//        }
//        else if (edatPacient>=66 && edatPacient<=68){
//            edat = "66-68";
//        }
//        else if (edatPacient>=69 && edatPacient<=71){
//            edat = "69-71";
//        }
//        else if (edatPacient>=72 && edatPacient<=74){
//            edat = "72-74";
//        }
//        else if (edatPacient>=75 && edatPacient<=77){
//            edat = "75-77";
//        }
//        else if (edatPacient>=78 && edatPacient<=80){
//            edat = "78-80";
//        }
//        else if (edatPacient<=81){
//            edat = "81-90";
//        }
//        
//        List<Object> list;
//        if (digits){
//            System.out.println(Integer.parseInt(spanDD.getText()));
//            System.out.println(edat);
//            list = taulaDigitsDD.get(edat).get(Integer.parseInt(spanDD.getText()));
//            percentilDD.setText((String) list.get(1));
//        } else {
//            list = taulaDigitsDI.get(edat).get(Integer.parseInt(spanDI.getText()));
//            percentilDI.setText((String) list.get(1));
//        }
//        int scaledScore = (int) list.get(0);
//        
//        int anysEscola = pacientActual.getAnysEscola();
//        int modificador = 0;
//        
//        if (anysEscola <= 2){
//            modificador = 2;
//        }
//        else if (anysEscola >=3 && anysEscola <=7){
//            modificador = 1;
//        }
//        else if (anysEscola >=8 && anysEscola <=12){
//            modificador = 0;
//        }
//        else if (anysEscola >=13 && anysEscola <=16){
//            modificador = -1;
//        }
//        else if (anysEscola >=17){
//            modificador = -2;
//        }
//        if (digits)
//            nssaDD.setText(scaledScore+modificador+"");
//        else
//            nssaDI.setText(scaledScore+modificador+"");
//    }
//
//    private void initHashDI() {
//    
//        taulaDigitsDI = new HashMap<>();
//        List<Object> auxList;
//        HashMap<Integer, List<Object>> auxMap = new HashMap<>();
//        
//        auxList = Arrays.asList(2, "<1");
//        auxMap.put(0, auxList);
//        auxMap.put(1, auxList);
//        auxList = Arrays.asList(3, "1");
//        auxMap.put(2, auxList);
//        auxList = Arrays.asList(9, "29-40");
//        auxMap.put(3, auxList);
//        auxList = Arrays.asList(10, "41-59");
//        auxMap.put(4, auxList);
//        auxList = Arrays.asList(13, "82-89");
//        auxMap.put(5, auxList);
//        auxList = Arrays.asList(15, "95-97");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(18, ">99");
//        auxMap.put(7, auxList);
//        taulaDigitsDI.put("50-56", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(2, auxList);
//        taulaDigitsDI.put("57-59", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(11, "60-71");
//        auxMap.put(4, auxList);
//        auxList = Arrays.asList(14, "90-94");
//        auxMap.put(5, auxList);
//        taulaDigitsDI.put("60-62", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(10, "41-59");
//        auxMap.put(3, auxList);
//        auxList = Arrays.asList(18, ">99");
//        auxMap.put(6, auxList);
//        taulaDigitsDI.put("63-65", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(9, "29-40");
//        auxMap.put(3, auxList);
//        taulaDigitsDI.put("66-68", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(10, "41-59");
//        auxMap.put(3, auxList);
//        auxList = Arrays.asList(12, "72-81");
//        auxMap.put(4, auxList);
//        auxList = Arrays.asList(17, "99");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(18, ">99");
//        auxMap.put(7, auxList);
//        taulaDigitsDI.put("69-71", new HashMap(auxMap));
//        
//        taulaDigitsDI.put("72-74", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(2, auxList);
//        taulaDigitsDI.put("75-77", new HashMap(auxMap));
//        
//        taulaDigitsDI.put("78-80", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(3, auxList);
//        auxList = Arrays.asList(18, ">99");
//        auxMap.put(6, auxList);
//        taulaDigitsDI.put("81-90", new HashMap(auxMap));
//    
//    }
//
//    private void initColorTrails() {
//        String header = "<html><center><font color=\"rgb(255,255,255)\">";
//        CustomModel model = new CustomModel(
//            new Object [][] {
//                {"<html><b>Color Trails 1 - Time in seconds",null, "X", null, null, null},
//                {"<html><b>Color Trails 1 - Errors",null, null, "X", "X", "X"},
//                {"<html><b>Color Trails 1 - Near-Misses",null, null, "X", "X", "X"},
//                {"<html><b>Color Trails 1 - Prompts",null, null, "X", "X", "X"},
//                {"<html><b>Color Trails 2 - Time in seconds",null, "X", null, null, null},
//                {"<html><b>Color Trails 2 - Errors",null, null, "X", "X", "X"},
//                {"<html><b>Color Trails 2 - Near-Misses",null, null, "X", "X", "X"},
//                {"<html><b>Color Trails 2 - Prompts",null, null, "X", "X", "X"},
//                {"<html><b>Interference Index</b><br>(Color Trails 2 times raw score<br>minus Color Trails 1 time raw score)<br>/Color Trails 1 time raw score",null, null, "X", "X", "X"}
//            },
//            new String [] {
//                "",header+"Raw<br>score", header+"Percentile<br>range", header+"Standard<br>score", header+"T<br>score", header+"Percentile<br>score"
//            }
//        );
//        
//        
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class,java.lang.String.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, true, true, false, false, false
//        };
//        
//        System.out.println(model.getColumnCount());
//        System.out.println(model.getRowCount());
//        boolean edit[][] = new boolean[model.getColumnCount()][model.getRowCount()];
//        for (boolean[] r: edit)
//            Arrays.fill(r, false);
//        
//        Arrays.fill(edit[1],true);
//        Arrays.fill(edit[2],true);
//        
//        model.setCanEditMatrix(edit);
//        
//        model.setCustom(true);
//        model.setEditable(2, 0, false);
//        model.setEditable(2, 4, false);
//        model.setEditable(3, 0, true);
//        model.setEditable(3, 4, true);
//        model.setEditable(4, 0, true);
//        model.setEditable(4, 4, true);
//        model.setEditable(5, 0, true);
//        model.setEditable(5, 4, true);
//        
//        model.setTypes(types);
//        model.setCanEdit(canEdit);
//
//
//        
//        colorTrailsTable.setModel(model);
//        
//        //digitsDirecteTable.getColumnModel().getColumn(4).setCellRenderer( new customRenderer(true) );
//        //digitsDirecteTable.getColumnModel().getColumn(0).setCellRenderer( new customRenderer(true) );
//        
//        
//        for (int i=1; i<colorTrailsTable.getColumnModel().getColumnCount();i++){
//            colorTrailsTable.getColumnModel().getColumn(i).setResizable(false);
//            colorTrailsTable.getColumn(i).setHeaderRenderer(new CustomRenderer(new Color(190,80,80),true));
//            colorTrailsTable.getColumnModel().getColumn(i).setPreferredWidth(120);
//            colorTrailsTable.getColumnModel().getColumn(i).setCellRenderer( new CustomRenderer(true) );
//        }
//        
//        colorTrailsTable.getColumnModel().getColumn(0).setResizable(false);
//        
//        //digitsDirecteTable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        colorTrailsTable.getTableHeader().setReorderingAllowed(false);
//        
//        //colorTrailsTable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        for (int i = 0; i<colorTrailsTable.getRowCount()-1; i++){
//            colorTrailsTable.setRowHeight(i, 30);
//        }
//        colorTrailsTable.setRowHeight(8, 80);
//        colorTrailsTable.getColumn(3).setPreferredWidth(120);
//        colorTrailsTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        colorTrailsTable.packAll();
//        
//    }
//
//    private void initTimer() {
//        this.llistaBtn5digits = new JButton[4];
//        llistaBtn5digits[0] = fiveDigitStart1;
//        llistaBtn5digits[1] = fiveDigitStart2;
//        llistaBtn5digits[2] = fiveDigitStart3;
//        llistaBtn5digits[3] = fiveDigitStart4;
//        timeFormatter = new DecimalFormat("00");
//        timer = new Timer(10, new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//
//                long now = System.currentTimeMillis();
//                long dif = now - startTime;
//
//                long minutes = dif / (60 * 1000);
//                dif = Math.round(dif % (60 * 1000));
//                long seconds = dif / 1000;
//                dif = Math.round(dif % 1000);
//                long centiseconds = dif / 10;
//
//                llistaBtn5digits[pagina].setText(timeFormatter.format(minutes) + ":"
//                        + timeFormatter.format(seconds) + "."
//                        + timeFormatter.format(centiseconds));
//            }
//        });
//        
//        timerColor = new Timer(10, new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                long now = System.currentTimeMillis();
//                long dif = now - startTime;
//                
//                secondsColor1 = dif / 1000;
//                
//                long minutes = dif / (60 * 1000);
//                dif = Math.round(dif % (60 * 1000));
//                long seconds = dif / 1000;
//                dif = Math.round(dif % 1000);
//                long centiseconds = dif / 10;
//                colorTrailsCronoLabel.setText(timeFormatter.format(minutes) + ":"
//                        + timeFormatter.format(seconds) + "."
//                        + timeFormatter.format(centiseconds));
//            }
//            
//        });
//        
//        timerColor2 = new Timer(10, new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                long now = System.currentTimeMillis();
//                long dif = now - startTime;
//                
//                secondsColor2 = dif / 1000;
//                
//                long minutes = dif / (60 * 1000);
//                dif = Math.round(dif % (60 * 1000));
//                long seconds = dif / 1000;
//                dif = Math.round(dif % 1000);
//                long centiseconds = dif / 10;
//                colorTrailsCronoLabel1.setText(timeFormatter.format(minutes) + ":"
//                        + timeFormatter.format(seconds) + "."
//                        + timeFormatter.format(centiseconds));
//            }
//            
//        });
//        
//    }
//
//    private void initFluenciaVerbalTable() {
//        String header = "<html><font color=\"rgb(255,255,255)\">";
//        CustomModel model = new CustomModel(
//            new Object [][] {
//                {"1.", null,"1.",null,"1.",null,"1.",null},
//                {"2.", null,"2.",null,"2.",null,"2.",null},
//                {"3.", null,"3.",null,"3.",null,"3.",null},
//                {"4.", null,"4.",null,"4.",null,"4.",null},
//                {"5.", null,"5.",null,"5.",null,"5.",null},
//                {"6.", null,"6.",null,"6.",null,"6.",null},
//                {"7.", null,"7.",null,"7.",null,"7.",null},
//                {"8.", null,"8.",null,"8.",null,"8.",null},
//                {"9.", null,"9.",null,"9.",null,"9.",null},
//                {"10.", null,"10.",null,"10.",null,"10.",null},
//                {"11.", null,"11.",null,"11.",null,"11.",null},
//                {"12.", null,"12.",null,"12.",null,"12.",null},
//                {"13.", null,"13.",null,"13.",null,"13.",null},
//                {"14.", null,"14.",null,"14.",null,"14.",null},
//                {"15.", null,"15.",null,"15.",null,"15.",null},
//                {"16.", null,"16.",null,"16.",null,"16.",null},
//                {"17.", null,"17.",null,"17.",null,"17.",null},
//                {"18.", null,"18.",null,"18.",null,"18.",null},
//                {"19.", null,"19.",null,"19.",null,"19.",null},
//                {"20.", null,"20.",null,"20.",null,"20.",null},
//                {"21.", null,"21.",null,"21.",null,"21.",null},
//                {"22.", null,"22.",null,"22.",null,"22.",null},
//                {"23.", null,"23.",null,"23.",null,"23.",null},
//                {"24.", null,"24.",null,"24.",null,"24.",null},
//                {"25.", null,"25.",null,"25.",null,"25.",null},
//                {"<html><b>Total", null,"<html><b>Total",null,"<html><b>Total",null,"<html><b>Total",null},
//                    {"<html><b>Percentil", null,"<html><b>Percentil",null,"<html><b>Percentil",null,"<html><b>Percentil",null},
//                    {"<html><b>NSSA", null,"<html><b>NSSA",null,"<html><b>NSSA",null,"<html><b>NSSA",null}
//            },
//            new String [] {
//                "", header+"P", "", header+"M","", header+"R","", header+"ANIMALS"
//            }
//        );
//        
//        Class[] types = new Class [] {
//            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class
//        };
//        boolean[] canEdit = new boolean [] {
//            false, true, false, true,false, true,false, true
//        };
//        
//        model.setTypes(types);
//        model.setCanEdit(canEdit);
//        
//        fluenciaVerbalTable.setModel(model);
//        
//        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
//        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
//        fluenciaVerbalTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
//        fluenciaVerbalTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
//        fluenciaVerbalTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
//        fluenciaVerbalTable.getColumnModel().getColumn(7).setCellRenderer( centerRenderer );
//        
//        for (int i=0; i<fluenciaVerbalTable.getColumnModel().getColumnCount();i++){
//            fluenciaVerbalTable.getColumnModel().getColumn(i).setResizable(false);
//            fluenciaVerbalTable.getColumn(i).setHeaderRenderer(new CustomRenderer(new Color(190,80,80),true));
//        }
//        
//        
//        fluenciaVerbalTable.getTableHeader().setReorderingAllowed(false);
//        fluenciaVerbalTable.setHighlighters(HighlighterFactory.createSimpleStriping());
//        
//        for (int i = 0; i<fluenciaVerbalTable.getRowCount(); i++){
//            fluenciaVerbalTable.setRowHeight(i, 20);
//        }
//        
//        fluenciaVerbalTable.setRowHeight(25, 35);
//        fluenciaVerbalTable.setRowHeight(26, 35);
//        fluenciaVerbalTable.setRowHeight(27, 35);
//        
//        
//        fluenciaVerbalTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        fluenciaVerbalTable.packAll();
//        fluenciaVerbalTable.getColumn(1).setPreferredWidth(150);
//        fluenciaVerbalTable.getColumn(3).setPreferredWidth(150);
//        fluenciaVerbalTable.getColumn(5).setPreferredWidth(150);
//        fluenciaVerbalTable.getColumn(7).setPreferredWidth(150);
//    }
//
//    private int calculaMLI(int punt) {
//        int percentil = 0;
//        int edat = pacientActual.getEdat();
//        if(edat <= 64){
//            if (punt <=3){
//               percentil = 1; 
//            } else if (punt>=4 && punt<=5){
//                percentil = 2;
//            }else if (punt>=6 && punt<=7){
//                percentil = 3;
//            }else if (punt==8){
//                percentil = 4;
//            }else if (punt>=9 && punt<=10){
//                percentil = 5;
//            }else if (punt>=11 && punt<=12){
//                percentil = 6;
//            }else if (punt>=13 && punt<=14){
//                percentil = 7;
//            }else if (punt>=15 && punt<=17){
//                percentil = 8;
//            }else if (punt>=18 && punt<=19){
//                percentil = 9;
//            }else if (punt>=20 && punt<=21){
//                percentil = 10;
//            }else if (punt>=22 && punt<=23){
//                percentil = 11;
//            }else if (punt>=24 && punt<=25){
//                percentil = 12;
//            }else if (punt>=26 && punt<=28){
//                percentil = 13;
//            }else if (punt>=29 && punt<=30){
//                percentil = 14;
//            }else if (punt>=31 && punt<=32){
//                percentil = 15;
//            }else if (punt>=33 && punt<=35){
//                percentil = 16;
//            }else if (punt>=36 && punt<=37){
//                percentil = 17;
//            }else if (punt>=38 && punt<=40){
//                percentil = 18;
//            }else if (punt>=41){
//                percentil = 19;
//            }
//            
//        } else if (edat >= 65 && edat<=69){
//            
//            if (punt <=4){
//               percentil = 1; 
//            } else if (punt>=5 && punt<=6){
//                percentil = 2;
//            }else if (punt>=7 && punt<=9){
//                percentil = 3;
//            }else if (punt>=10 && punt<=11){
//                percentil = 4;
//            }else if (punt>=12 && punt<=14){
//                percentil = 5;
//            }else if (punt>=15 && punt<=17){
//                percentil = 6;
//            }else if (punt>=18 && punt<=19){
//                percentil = 7;
//            }else if (punt>=20 && punt<=22){
//                percentil = 8;
//            }else if (punt>=23 && punt<=24){
//                percentil = 9;
//            }else if (punt>=25 && punt<=27){
//                percentil = 10;
//            }else if (punt>=28 && punt<=30){
//                percentil = 11;
//            }else if (punt>=31 && punt<=33){
//                percentil = 12;
//            }else if (punt>=34 && punt<=35){
//                percentil = 13;
//            }else if (punt>=36 && punt<=38){
//                percentil = 14;
//            }else if (punt>=39 && punt<=41){
//                percentil = 15;
//            }else if (punt>=42 && punt<=44){
//                percentil = 16;
//            }else if (punt>=45 && punt<=47){
//                percentil = 17;
//            }else if (punt>=48 && punt<=50){
//                percentil = 18;
//            }else if (punt>=51){
//                percentil = 19;
//            }
//            
//        } else if (edat >= 70 && edat<=74){
//            
//            if (punt <=3){
//               percentil = 1; 
//            } else if (punt>=4 && punt<=5){
//                percentil = 2;
//            }else if (punt>=6 && punt<=8){
//                percentil = 3;
//            }else if (punt>=9 && punt<=10){
//                percentil = 4;
//            }else if (punt>=11 && punt<=12){
//                percentil = 5;
//            }else if (punt>=13 && punt<=15){
//                percentil = 6;
//            }else if (punt>=16 && punt<=17){
//                percentil = 7;
//            }else if (punt>=18 && punt<=20){
//                percentil = 8;
//            }else if (punt>=21 && punt<=22){
//                percentil = 9;
//            }else if (punt>=23 && punt<=25){
//                percentil = 10;
//            }else if (punt>=26 && punt<=28){
//                percentil = 11;
//            }else if (punt>=29 && punt<=31){
//                percentil = 12;
//            }else if (punt>=32 && punt<=34){
//                percentil = 13;
//            }else if (punt>=35 && punt<=37){
//                percentil = 14;
//            }else if (punt>=38 && punt<=40){
//                percentil = 15;
//            }else if (punt>=41 && punt<=43){
//                percentil = 16;
//            }else if (punt>=44 && punt<=46){
//                percentil = 17;
//            }else if (punt>=47 && punt<=49){
//                percentil = 18;
//            }else if (punt>=50){
//                percentil = 19;
//            }
//            
//        }else if (edat >= 75 && edat<=79){
//            
//            if (punt <=1){
//               percentil = 1; 
//            } else if (punt>=2 && punt<=3){
//                percentil = 2;
//            }else if (punt>=4 && punt<=6){
//                percentil = 3;
//            }else if (punt>=7 && punt<=8){
//                percentil = 4;
//            }else if (punt>=9 && punt<=10){
//                percentil = 5;
//            }else if (punt>=11 && punt<=13){
//                percentil = 6;
//            }else if (punt>=14 && punt<=16){
//                percentil = 7;
//            }else if (punt>=17 && punt<=18){
//                percentil = 8;
//            }else if (punt>=19 && punt<=21){
//                percentil = 9;
//            }else if (punt>=22 && punt<=23){
//                percentil = 10;
//            }else if (punt>=24 && punt<=26){
//                percentil = 11;
//            }else if (punt>=27 && punt<=29){
//                percentil = 12;
//            }else if (punt>=30 && punt<=32){
//                percentil = 13;
//            }else if (punt>=33 && punt<=35){
//                percentil = 14;
//            }else if (punt>=36 && punt<=38){
//                percentil = 15;
//            }else if (punt>=39 && punt<=41){
//                percentil = 16;
//            }else if (punt>=42 && punt<=44){
//                percentil = 17;
//            }else if (punt>=45 && punt<=47){
//                percentil = 18;
//            }else if (punt>=48){
//                percentil = 19;
//            }
//            
//        }else if (edat >= 80){
//            
//            if (punt == 0){
//               percentil = 2; 
//            }else if (punt>=1 && punt<=2){
//                percentil = 3;
//            }else if (punt>=3 && punt<=5){
//                percentil = 4;
//            }else if (punt>=6 && punt<=7){
//                percentil = 5;
//            }else if (punt>=8 && punt<=10){
//                percentil = 6;
//            }else if (punt>=11 && punt<=12){
//                percentil = 7;
//            }else if (punt>=13 && punt<=15){
//                percentil = 8;
//            }else if (punt>=16 && punt<=17){
//                percentil = 9;
//            }else if (punt>=18 && punt<=20){
//                percentil = 10;
//            }else if (punt>=21 && punt<=23){
//                percentil = 11;
//            }else if (punt>=24 && punt<=26){
//                percentil = 12;
//            }else if (punt>=27 && punt<=29){
//                percentil = 13;
//            }else if (punt>=30 && punt<=32){
//                percentil = 14;
//            }else if (punt>=33 && punt<=35){
//                percentil = 15;
//            }else if (punt>=36 && punt<=38){
//                percentil = 16;
//            }else if (punt>=39 && punt<=41){
//                percentil = 17;
//            }else if (punt>=42 && punt<=44){
//                percentil = 18;
//            }else if (punt>=45){
//                percentil = 19;
//            }
//            
//        }
//        
//        return percentil;
//    }
//
//    private int calculaMLII(int punt) {
//        int edat = pacientActual.getEdat();
//        int percentil = 0;
//        
//        if(edat <= 64){
//            if (punt == 0){
//               percentil = 2;
//            }else if (punt>=1 && punt<=2){
//                percentil = 3;
//            }else if (punt>=3 && punt<=4){
//                percentil = 4;
//            }else if (punt>=5 && punt<=7){
//                percentil = 5;
//            }else if (punt>=8 && punt<=9){
//                percentil = 6;
//            }else if (punt>=10 && punt<=11){
//                percentil = 7;
//            }else if (punt>=12 && punt<=13){
//                percentil = 8;
//            }else if (punt>=14 && punt<=15){
//                percentil = 9;
//            }else if (punt>=16 && punt<=17){
//                percentil = 10;
//            }else if (punt>=18 && punt<=19){
//                percentil = 11;
//            }else if (punt>=20 && punt<=21){
//                percentil = 12;
//            }else if (punt>=22 && punt<=23){
//                percentil = 13;
//            }else if (punt>=24 && punt<=25){
//                percentil = 14;
//            }else if (punt>=26 && punt<=27){
//                percentil = 15;
//            }else if (punt>=28 && punt<=29){
//                percentil = 16;
//            }else if (punt>=30 && punt<=31){
//                percentil = 17;
//            }else if (punt>=32 && punt<=33){
//                percentil = 18;
//            }else if (punt>=34){
//                percentil = 19;
//            }
//            
//        } else if (edat >= 65 && edat<=69){
//            
//            if (punt ==0){
//               percentil = 2; 
//            } else if (punt==1){
//                percentil = 3;
//            }else if (punt>=2 && punt<=3){
//                percentil = 4;
//            }else if (punt==4){
//                percentil = 5;
//            }else if (punt>=5 && punt<=6){
//                percentil = 6;
//            }else if (punt>=7 && punt<=8){
//                percentil = 7;
//            }else if (punt>=9 && punt<=10){
//                percentil = 8;
//            }else if (punt>=11 && punt<=12){
//                percentil = 9;
//            }else if (punt>=13 && punt<=14){
//                percentil = 10;
//            }else if (punt>=15 && punt<=16){
//                percentil = 11;
//            }else if (punt>=17 && punt<=18){
//                percentil = 12;
//            }else if (punt>=19 && punt<=21){
//                percentil = 13;
//            }else if (punt>=22 && punt<=23){
//                percentil = 14;
//            }else if (punt>=24 && punt<=26){
//                percentil = 15;
//            }else if (punt>=27 && punt<=29){
//                percentil = 16;
//            }else if (punt>=30 && punt<=32){
//                percentil = 17;
//            }else if (punt>=33 && punt<=35){
//                percentil = 18;
//            }else if (punt>=36){
//                percentil = 19;
//            }
//            
//        } else if (edat >= 70 && edat<=74){
//            
//            if (punt == 0){
//               percentil = 4; 
//            } else if (punt>=1 && punt<=2){
//                percentil = 5;
//            }else if (punt==3){
//                percentil = 6;
//            }else if (punt>=4 && punt<=5){
//                percentil = 7;
//            }else if (punt>=6 && punt<=7){
//                percentil = 8;
//            }else if (punt>=8 && punt<=10){
//                percentil = 9;
//            }else if (punt>=11 && punt<=12){
//                percentil = 10;
//            }else if (punt>=13 && punt<=14){
//                percentil = 11;
//            }else if (punt>=15 && punt<=17){
//                percentil = 12;
//            }else if (punt>=18 && punt<=19){
//                percentil = 13;
//            }else if (punt>=20 && punt<=22){
//                percentil = 14;
//            }else if (punt>=23 && punt<=25){
//                percentil = 15;
//            }else if (punt>=26 && punt<=28){
//                percentil = 16;
//            }else if (punt>=29 && punt<=32){
//                percentil = 17;
//            }else if (punt>=33 && punt<=34){
//                percentil = 18;
//            }else if (punt>=35){
//                percentil = 19;
//            }
//            
//        }else if (edat >= 75 && edat<=79){
//            
//            if (punt == 0){
//               percentil = 4; 
//            } else if (punt>=1 && punt<=2){
//                percentil = 5;
//            }else if (punt==3){
//                percentil = 6;
//            }else if (punt>=4 && punt<=5){
//                percentil = 7;
//            }else if (punt>=6 && punt<=7){
//                percentil = 8;
//            }else if (punt>=8 && punt<=9){
//                percentil = 9;
//            }else if (punt>=10 && punt<=11){
//                percentil = 10;
//            }else if (punt>=12 && punt<=13){
//                percentil = 11;
//            }else if (punt>=14 && punt<=15){
//                percentil = 12;
//            }else if (punt>=16 && punt<=17){
//                percentil = 13;
//            }else if (punt>=18 && punt<=20){
//                percentil = 14;
//            }else if (punt>=21 && punt<=22){
//                percentil = 15;
//            }else if (punt>=23 && punt<=25){
//                percentil = 16;
//            }else if (punt>=26 && punt<=28){
//                percentil = 17;
//            }else if (punt>=29 && punt<=31){
//                percentil = 18;
//            }else if (punt>=32){
//                percentil = 19;
//            }
//            
//        }else if (edat >= 80){
//            
//            if (punt>=0 && punt<=1){
//                percentil = 6;
//            }else if (punt>=2 && punt<=3){
//                percentil = 7;
//            }else if (punt==4){
//                percentil = 8;
//            }else if (punt>=5 && punt<=6){
//                percentil = 9;
//            }else if (punt>=7 && punt<=8){
//                percentil = 10;
//            }else if (punt>=9 && punt<=10){
//                percentil = 11;
//            }else if (punt>=11 && punt<=12){
//                percentil = 12;
//            }else if (punt>=13 && punt<=15){
//                percentil = 13;
//            }else if (punt>=16 && punt<=17){
//                percentil = 14;
//            }else if (punt>=18 && punt<=20){
//                percentil = 15;
//            }else if (punt>=21 && punt<=22){
//                percentil = 16;
//            }else if (punt>=23 && punt<=25){
//                percentil = 17;
//            }else if (punt>=26 && punt<=28){
//                percentil = 18;
//            }else if (punt>=29){
//                percentil = 19;
//            }
//            
//        }
//        
//        return percentil;
//        
//    }
//
//    private void initHashBNTA() {
//        
//        taulaBNTA = new HashMap<>();
//        List<Object> auxList;
//        HashMap<Integer, List<Object>> auxMap = new HashMap<>();
//        
//        auxList = Arrays.asList(2, "<1");
//        auxMap.put(0, auxList);
//        auxMap.put(1, auxList);
//        auxMap.put(2, auxList);
//        auxMap.put(3, auxList);
//        auxMap.put(4, auxList);
//        auxMap.put(5, auxList);
//        auxMap.put(6, auxList);
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(9, "29-40");
//        auxMap.put(11, auxList);
//        auxList = Arrays.asList(10, "41-59");
//        auxMap.put(12, auxList);
//        auxList = Arrays.asList(11, "60-71");
//        auxMap.put(13, auxList);
//        auxList = Arrays.asList(13, "82-89");
//        auxMap.put(14, auxList);
//        auxList = Arrays.asList(18, ">99");
//        auxMap.put(15, auxList);
//        taulaBNTA.put("50-56", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(3, "1");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(14, "90-94");
//        auxMap.put(14, auxList);
//        taulaBNTA.put("57-59", new HashMap(auxMap));
//        
//        taulaBNTA.put("60-62", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(7, auxList);
//        taulaBNTA.put("63-65", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(15, "95-97");
//        auxMap.put(14, auxList);
//        taulaBNTA.put("66-68", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(4, "2");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(9, auxList);
//        taulaBNTA.put("69-71", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(4, "2");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(10, "41-59");
//        auxMap.put(11, auxList);
//        taulaBNTA.put("72-74", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(3, "1");
//        auxMap.put(5, auxList);
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(9, "29-40");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(11, "60-71");
//        auxMap.put(12, auxList);
//        auxList = Arrays.asList(16, "98");
//        auxMap.put(14, auxList);
//        taulaBNTA.put("75-77", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(12, "72-81");
//        auxMap.put(12, auxList);
//        auxList = Arrays.asList(14, "90-94");
//        auxMap.put(13, auxList);
//        auxList = Arrays.asList(17, "99");
//        auxMap.put(14, auxList);
//        taulaBNTA.put("78-80", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(4, "2");
//        auxMap.put(5, auxList);
//        auxList = Arrays.asList(13, "82-89");
//        auxMap.put(13, auxList);
//        auxList = Arrays.asList(16, "98");
//        auxMap.put(14, auxList);
//        taulaBNTA.put("81+", new HashMap(auxMap));
//        
//    }
//    
//    private void convertEdat(){
//        int edatP = pacientActual.getEdat();
//        String edat = "";
//        if (edatP<=56){
//            edat = "50-56";
//        }
//        else if (edatP>=57 && edatP<=59){
//            edat = "57-59";
//        }
//        else if (edatP>=60 && edatP<=62){
//            edat = "60-62";
//        }
//        else if (edatP>=63 && edatP<=65){
//            edat = "63-65";
//        }
//        else if (edatP>=66 && edatP<=68){
//            edat = "66-68";
//        }
//        else if (edatP>=69 && edatP<=71){
//            edat = "69-71";
//        }
//        else if (edatP>=72 && edatP<=74){
//            edat = "72-74";
//        }
//        else if (edatP>=75 && edatP<=77){
//            edat = "75-77";
//        }
//        else if (edatP>=78 && edatP<=80){
//            edat = "78-80";
//        }
//        else if (edatP<=81){
//            edat = "81+";
//        }
//        edatPacient =  edat;
//    }
//    
//    private void calcularBNTA() {
//        List<Object> list;
//        System.out.println(Integer.parseInt(correctesBntA.getText()));
//        System.out.println(edatPacient);
//        list = taulaBNTA.get(edatPacient).get(Integer.parseInt(correctesBntA.getText()));
//        percentilBNTA.setText((String) list.get(1));
//        
//        int scaledScore = (int) list.get(0);
//        
//        int anysEscola = pacientActual.getAnysEscola();
//        int modificador = 0;
//        
//        if (anysEscola == 0){
//            modificador = 3;
//        }
//        else if (anysEscola >=1 && anysEscola <=4){
//            modificador = 2;
//        }
//        else if (anysEscola >=5 && anysEscola <=8){
//            modificador = 1;
//        }
//        else if (anysEscola >=9 && anysEscola <=12){
//            modificador = 0;
//        }
//        else if (anysEscola >=13 && anysEscola <=15){
//            modificador = -1;
//        }
//        else if (anysEscola >=16 && anysEscola <=19){
//            modificador = -2;
//        }
//        else if (anysEscola == 20){
//            modificador = -3;
//        }
//        
//        nssaBNTA.setText(scaledScore+modificador+"");
//    }
//
//    private void initHashBNTB() {
//        taulaBNTB = new HashMap<>();
//        List<Object> auxList;
//        HashMap<Integer, List<Object>> auxMap = new HashMap<>();
//        
//        auxList = Arrays.asList(2, "<1");
//        auxMap.put(0, auxList);
//        auxMap.put(1, auxList);
//        auxMap.put(2, auxList);
//        auxMap.put(3, auxList);
//        auxMap.put(4, auxList);
//        auxMap.put(5, auxList);
//        auxMap.put(6, auxList);
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(3, "1");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(11, auxList);
//        auxList = Arrays.asList(10, "41-59");
//        auxMap.put(12, auxList);
//        auxList = Arrays.asList(12, "72-81");
//        auxMap.put(13, auxList);
//        auxList = Arrays.asList(15, "95-97");
//        auxMap.put(14, auxList);
//        auxList = Arrays.asList(18, ">99");
//        auxMap.put(15, auxList);
//        taulaBNTB.put("50-56", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(10, auxList);
//        taulaBNTB.put("57-59", new HashMap(auxMap));
//        
//        taulaBNTB.put("60-62", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(3, "1");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(9, "29-40");
//        auxMap.put(11, auxList);
//        auxList = Arrays.asList(16, "98");
//        auxMap.put(14, auxList);
//        taulaBNTB.put("63-65", new HashMap(auxMap));
//        
//        taulaBNTB.put("66-68", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(10, "41-59");
//        auxMap.put(11, auxList);
//        auxList = Arrays.asList(11, "60-71");
//        auxMap.put(12, auxList);
//        auxList = Arrays.asList(15, "95-97");
//        auxMap.put(14, auxList);
//        taulaBNTB.put("69-71", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(3, "1");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(9, "29-40");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(13, "82-89");
//        auxMap.put(13, auxList);
//        auxList = Arrays.asList(16, "98");
//        auxMap.put(14, auxList);
//        taulaBNTB.put("72-74", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(9, auxList);
//        taulaBNTB.put("75-77", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(12, "72-81");
//        auxMap.put(12, auxList);
//        auxList = Arrays.asList(14, "90-94");
//        auxMap.put(13, auxList);
//        auxList = Arrays.asList(17, "99");
//        auxMap.put(14, auxList);
//        taulaBNTB.put("78-80", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(9, "29-40");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(16, "98");
//        auxMap.put(14, auxList);
//        taulaBNTB.put("81+", new HashMap(auxMap));
//    }
//    
//    private void calcularBNTB() {
//        List<Object> list;
//        System.out.println(Integer.parseInt(correctesBntB.getText()));
//        System.out.println(edatPacient);
//        list = taulaBNTB.get(edatPacient).get(Integer.parseInt(correctesBntB.getText()));
//        percentilBNTB.setText((String) list.get(1));
//        
//        int scaledScore = (int) list.get(0);
//        
//        int anysEscola = pacientActual.getAnysEscola();
//        int modificador = 0;
//        
//        if (anysEscola == 0){
//            modificador = 0;
//        }
//        else if (anysEscola == 1){
//            modificador = 3;
//        }
//        else if (anysEscola >=2 && anysEscola <=4){
//            modificador = 2;
//        }
//        else if (anysEscola >=6 && anysEscola <=9){
//            modificador = 1;
//        }
//        else if (anysEscola >=10 && anysEscola <=13){
//            modificador = 0;
//        }
//        else if (anysEscola >=14 && anysEscola <=16){
//            modificador = -1;
//        }
//        else if (anysEscola >=16 && anysEscola <=20){
//            modificador = -2;
//        }
//        
//        nssaBNTB.setText(scaledScore+modificador+"");
//    }
//
//    private void initHashBNTC() {
//        taulaBNTC = new HashMap<>();
//        List<Object> auxList;
//        HashMap<Integer, List<Object>> auxMap = new HashMap<>();
//        
//        auxList = Arrays.asList(2, "<1");
//        auxMap.put(0, auxList);
//        auxMap.put(1, auxList);
//        auxMap.put(2, auxList);
//        auxMap.put(3, auxList);
//        auxMap.put(4, auxList);
//        auxMap.put(5, auxList);
//        auxMap.put(6, auxList);
//        auxMap.put(7, auxList);
//        auxMap.put(8, auxList);
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(9, "29-40");
//        auxMap.put(11, auxList);
//        auxList = Arrays.asList(10, "41-59");
//        auxMap.put(12, auxList);
//        auxList = Arrays.asList(11, "60-71");
//        auxMap.put(13, auxList);
//        auxList = Arrays.asList(13, "82-89");
//        auxMap.put(14, auxList);
//        auxList = Arrays.asList(18, ">99");
//        auxMap.put(15, auxList);
//        taulaBNTC.put("50-56", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(4, "2");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(12, "72-81");
//        auxMap.put(13, auxList);
//        taulaBNTC.put("57-59", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(10, auxList);
//        taulaBNTC.put("60-62", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(14, "90-94");
//        auxMap.put(14, auxList);
//        taulaBNTC.put("63-65", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(3, "1");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(11, "60-71");
//        auxMap.put(12, auxList);
//        auxList = Arrays.asList(13, "82-89");
//        auxMap.put(13, auxList);
//        auxList = Arrays.asList(13, "82-89");
//        auxMap.put(14, auxList);
//        taulaBNTC.put("66-68", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(2, "<1");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(4, "2");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(10, "41-59");
//        auxMap.put(11, auxList);
//        auxList = Arrays.asList(12, "72-81");
//        auxMap.put(13, auxList);
//        taulaBNTC.put("69-71", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(3, "1");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(5, "3-5");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(13, "82-89");
//        auxMap.put(13, auxList);
//        auxList = Arrays.asList(14, "90-94");
//        auxMap.put(14, auxList);
//        taulaBNTC.put("72-74", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(7, "11-18");
//        auxMap.put(8, auxList);
//        taulaBNTC.put("75-77", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(6, "6-10");
//        auxMap.put(7, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(8, auxList);
//        auxList = Arrays.asList(8, "19-28");
//        auxMap.put(9, auxList);
//        auxList = Arrays.asList(9, "29-40");
//        auxMap.put(10, auxList);
//        auxList = Arrays.asList(12, "72-81");
//        auxMap.put(12, auxList);
//        auxList = Arrays.asList(15, "95-97");
//        auxMap.put(14, auxList);
//        taulaBNTC.put("78-80", new HashMap(auxMap));
//        
//        auxList = Arrays.asList(4, "2");
//        auxMap.put(6, auxList);
//        auxList = Arrays.asList(14, "90-94");
//        auxMap.put(13, auxList);
//        auxList = Arrays.asList(16, "98");
//        auxMap.put(14, auxList);
//        taulaBNTC.put("81+", new HashMap(auxMap));
//    }
//    
//    private void calcularBNTC() {
//        List<Object> list;
//        System.out.println(Integer.parseInt(correctesBntC.getText()));
//        System.out.println(edatPacient);
//        list = taulaBNTC.get(edatPacient).get(Integer.parseInt(correctesBntC.getText()));
//        percentilBNTC.setText((String) list.get(1));
//        
//        int scaledScore = (int) list.get(0);
//        
//        int anysEscola = pacientActual.getAnysEscola();
//        int modificador = 0;
//        
//        if (anysEscola == 0){
//            modificador = 4;
//        }
//        else if (anysEscola >=1 && anysEscola <=3){
//            modificador = 3;
//        }
//        else if (anysEscola >=4 && anysEscola <=6){
//            modificador = 2;
//        }
//        else if (anysEscola >=7 && anysEscola <=9){
//            modificador = 1;
//        }
//        else if (anysEscola >=10 && anysEscola <=12){
//            modificador = 0;
//        }
//        else if (anysEscola >=13 && anysEscola <=14){
//            modificador = -1;
//        }
//        else if (anysEscola >=15 && anysEscola <=17){
//            modificador = -2;
//        }
//        else if (anysEscola >=18 && anysEscola <=20){
//            modificador = -3;
//        }
//        
//        nssaBNTC.setText(scaledScore+modificador+"");
//    }
//
//    private void initCogstateButtons() {
//        File file = new File(Utils.PACIENT_DATA_PATH+this.pacientActual.getId()+File.separator+this.pacientActual.getId()+"COGSTATE_T"+valoracio+".pdf");
//        if (file.exists()){
//            obrePdfBtn.setEnabled(true);
//        }
//        file = new File(Utils.PACIENT_DATA_PATH+this.pacientActual.getId()+File.separator+this.pacientActual.getId()+"COGSTATE_T"+valoracio+".xlsx");
//        if (file.exists()){
//            obreExcelBtn.setEnabled(true);
//        }
//    }
    
//    private void guardarResultats(){
//        Properties prop = new Properties();
//	OutputStream output = null;
//
//	try {
//            
//        File f = new File(Utils.PACIENT_DATA_PATH+pacientActual.getId()+File.separator);
//            if (!f.exists()){
//                f.mkdir();
//            }
//            File file = new File(Utils.PACIENT_DATA_PATH+pacientActual.getId()+File.separator+"resultsSessio1_T"+valoracio+".dat");
//                
//		output = new FileOutputStream(file);
//                
//        // Digits directe
//        Utils.setProperty(prop,"puntuacioDirectaDD",puntuacioDirectaDD);
//        Utils.setProperty(prop,"spanDD",spanDD);
//        Utils.setProperty(prop,"nssaDD",nssaDD);
//        Utils.setProperty(prop,"percentilDD",percentilDD);
//        // Digits invers
//        Utils.setProperty(prop,"puntuacioDirectaDI",puntuacioDirectaDI);
//        Utils.setProperty(prop,"spanDI",spanDI);
//        Utils.setProperty(prop,"nssaDI",nssaDI);
//        Utils.setProperty(prop,"percentilDI",percentilDI);
//        // Memoria logica I
//        Utils.setProperty(prop,"historiaAprimerTotal",historiaAprimerTotal);
//        Utils.setProperty(prop,"textHistoriaAprimer",textHistoriaAprimer);
//        Utils.setProperty(prop,"historiaAsegonTotal",historiaAsegonTotal);
//        Utils.setProperty(prop,"textHistoriaAsegon",textHistoriaAsegon);
//        Utils.setProperty(prop,"historiaBprimerTotal",historiaBprimerTotal);
//        Utils.setProperty(prop,"textHistoriaBprimer",textHistoriaBprimer);
//        Utils.setProperty(prop,"ML1Total",ML1Total);
//        Utils.setProperty(prop,"puntuacioML1",puntuacioML1);
//        // Memoria logica II
//        Utils.setProperty(prop,"historiaAprimerTotal2",historiaAprimerTotal2);
//        Utils.setProperty(prop,"textHistoriaAprimer2",textHistoriaAprimer2);
//        Utils.setProperty(prop,"historiaBprimerTotal2",historiaBprimerTotal2);
//        Utils.setProperty(prop,"textHistoriaBprimer2",textHistoriaBprimer2);
//        Utils.setProperty(prop,"ML2Total",ML2Total);
//        Utils.setProperty(prop,"puntuacioML2",puntuacioML2);
//        Utils.setProperty(prop,"totalRecA",totalRecA);
//        Utils.setProperty(prop,"totalRecB",totalRecB);
//        Utils.setProperty(prop,"totalRec",totalRec);
//        
//        if (valoracio.equals("1")){
//            // BNT A
//            Utils.setProperty(prop,"totalBnt"+valoracio,totalBntA);
//            Utils.setProperty(prop,"semanticaBnt"+valoracio,semanticaBntA);
//            Utils.setProperty(prop,"percentilBNT"+valoracio,percentilBNTA);
//            Utils.setProperty(prop,"nssaBNT"+valoracio,nssaBNTA);
//        } else if (valoracio.equals("2")){
//            // BNT B
//            Utils.setProperty(prop,"totalBnt"+valoracio,totalBntB);
//            Utils.setProperty(prop,"semanticaBnt"+valoracio,semanticaBntB);
//            Utils.setProperty(prop,"percentilBNT"+valoracio,percentilBNTB);
//            Utils.setProperty(prop,"nssaBNT"+valoracio,nssaBNTB);
//        } else if (valoracio.equals("3")){
//            // BNT C
//            Utils.setProperty(prop,"totalBnt"+valoracio,totalBntC);
//            Utils.setProperty(prop,"semanticaBnt"+valoracio,semanticaBntC);
//            Utils.setProperty(prop,"percentilBNT"+valoracio,percentilBNTC);
//            Utils.setProperty(prop,"nssaBNT"+valoracio,nssaBNTC);
//        }
//        
//        // Color trails 1 time in seconds
//            System.out.println((String)colorTrailsTable.getValueAt(0,1));
//        prop.setProperty("color1timeRaw",getStringFromTable((String)colorTrailsTable.getValueAt(0,1)));
//        prop.setProperty("color1timeStandard",getStringFromTable((String)colorTrailsTable.getValueAt(0,3)));
//        prop.setProperty("color1timeTscore",getStringFromTable((String)colorTrailsTable.getValueAt(0,4)));
//        prop.setProperty("color1timePercentile",getStringFromTable((String)colorTrailsTable.getValueAt(0,5)));
//        // Color trails 1 errors
//        prop.setProperty("color1errorRaw",getStringFromTable((String)colorTrailsTable.getValueAt(1,1)));
//        prop.setProperty("color1errorPercentile",getStringFromTable((String)colorTrailsTable.getValueAt(1,2)));
//        // Color trails 1 Near misses
//        prop.setProperty("color1nearRaw",getStringFromTable((String)colorTrailsTable.getValueAt(2,1)));
//        prop.setProperty("color1nearPercentile",getStringFromTable((String)colorTrailsTable.getValueAt(2,2)));
//        // Color trails 1 prompts
//        prop.setProperty("color1promptsRaw",getStringFromTable((String)colorTrailsTable.getValueAt(3,1)));
//        prop.setProperty("color1promptsPercentile",getStringFromTable((String)colorTrailsTable.getValueAt(3,2)));
//        // Color trails 2 time in seconds
//        prop.setProperty("color2timeRaw",getStringFromTable((String)colorTrailsTable.getValueAt(4,1)));
//        prop.setProperty("color2timeStandard",getStringFromTable((String)colorTrailsTable.getValueAt(4,3)));
//        prop.setProperty("color2timeTscore",getStringFromTable((String)colorTrailsTable.getValueAt(4,4)));
//        prop.setProperty("color2timePercentile",getStringFromTable((String)colorTrailsTable.getValueAt(4,5)));
//        // Color trails 2 errors
//        prop.setProperty("color2errorRaw",getStringFromTable((String)colorTrailsTable.getValueAt(5,1)));
//        prop.setProperty("color2errorPercentile",getStringFromTable((String)colorTrailsTable.getValueAt(5,2)));
//        // Color trails 2 Near misses
//        prop.setProperty("color2nearRaw",getStringFromTable((String)colorTrailsTable.getValueAt(6,1)));
//        prop.setProperty("color2nearPercentile",getStringFromTable((String)colorTrailsTable.getValueAt(6,2)));
//        // Color trails 2 prompts
//        prop.setProperty("color2promptsRaw",getStringFromTable((String)colorTrailsTable.getValueAt(7,1)));
//        prop.setProperty("color2promptsPercentile",getStringFromTable((String)colorTrailsTable.getValueAt(7,2)));
//        // Color trails interference index
//        prop.setProperty("colorInterferenceRaw",getStringFromTable((String)colorTrailsTable.getValueAt(8,1)));
//        prop.setProperty("colorInterferencePercentile",getStringFromTable((String)colorTrailsTable.getValueAt(8,2)));
//        // Five digit
//        Utils.setProperty(prop,"lecturaTemps",lecturaTemps);
//        Utils.setProperty(prop,"lecturaTempsPCField",lecturaTempsPCField);
//        Utils.setProperty(prop,"lecturaErrorsField",lecturaErrors);
//        Utils.setProperty(prop,"lecturaErrorsPCField",lecturaErrorsPCField);
//        // Five digit
//        Utils.setProperty(prop,"compteigTemps",compteigTemps);
//        Utils.setProperty(prop,"compteigTempsPCField",compteigTempsPCField);
//        Utils.setProperty(prop,"compteigErrors",compteigErrors);
//        Utils.setProperty(prop,"compteigErrorsPCField",compteigErrorsPCField);
//        // Five digit
//        Utils.setProperty(prop,"lecturaTemps",eleccioTemps);
//        Utils.setProperty(prop,"lecturaTempsPCField",eleccioTempsPCField);
//        Utils.setProperty(prop,"lecturaErrorsField",eleccioErrors);
//        Utils.setProperty(prop,"lecturaErrorsPCField",eleccioErrorsPCField);
//        // Five digit
//        Utils.setProperty(prop,"alternTemps",alternTemps);
//        Utils.setProperty(prop,"alternTempsPCField",alternTempsPCField);
//        Utils.setProperty(prop,"alternErrors",alternErrors);
//        Utils.setProperty(prop,"alternErrorsPCField",alternErrorsPCField);
//        // Five digit
//        Utils.setProperty(prop,"inhibicioPCField",inhibicioPCField);
//        Utils.setProperty(prop,"flexibilitatPCField",flexibilitatPCField);
//        // Fluencia verbal
//        prop.setProperty("fluenciaP",getStringFromTable((String)fluenciaVerbalTable.getValueAt(25,1)));
//        prop.setProperty("fluenciaM",getStringFromTable((String)fluenciaVerbalTable.getValueAt(25,3)));
//        prop.setProperty("fluenciaR",getStringFromTable((String)fluenciaVerbalTable.getValueAt(25,5)));
//        prop.setProperty("fluenciaAnimals",getStringFromTable((String)fluenciaVerbalTable.getValueAt(25,7)));
//
//        prop.store(output, "Sessio1");
//                
//
//	} catch (IOException io) {
//		io.printStackTrace();
//        } finally {
//            if (output != null) {
//		try {
//                    output.close();
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }
//            }
//	}
//    }

    private String getStringFromTable(String string) {
        if (string != null){
            return string;
        }
        else {
            return "";
        }
    }

    private void initD() {
        Digits digits = new Digits(pacientActual);
        tabbedPanel.addTab("DIGITS 2", digits);
    }

    private void addTabs() {
        Digits digits = new Digits(pacientActual);
        tabbedPanel.addTab(digits.getLabel(), digits);
        
        MemoriaLogicaI memoriaLogicaI = new MemoriaLogicaI(pacientActual);
        tabbedPanel.addTab(memoriaLogicaI.getLabel(), memoriaLogicaI);
        
        Cogstate cogstate = new Cogstate(this, pacientActual, valoracio);
        tabbedPanel.addTab(cogstate.getLabel(), cogstate);
        
        MemoriaLogicaII memoriaLogicaII = new MemoriaLogicaII(pacientActual);
        tabbedPanel.addTab(memoriaLogicaII.getLabel(), memoriaLogicaII);
        
        BNT bnt = new BNT(pacientActual, valoracio);
        tabbedPanel.addTab(bnt.getLabel(), bnt);
        
        ColorTrails colorTrails = new ColorTrails(pacientActual);
        tabbedPanel.addTab(colorTrails.getLabel(), colorTrails);
        
        FiveDigit fiveDigit = new FiveDigit(pacientActual);
        tabbedPanel.addTab(fiveDigit.getLabel(), fiveDigit);
        
        FluenciaVerbal fluenciaVerbal = new FluenciaVerbal(pacientActual);
        tabbedPanel.addTab(fluenciaVerbal.getLabel(), fluenciaVerbal);
    }
}

class CustomRenderer extends javax.swing.table.DefaultTableCellRenderer {
    Color color = java.awt.Color.WHITE;
    boolean cust = false;
    boolean[][] customColors;
    
    public CustomRenderer (Color color, boolean center){
        this.color = color;
        if (center){
            this.setHorizontalAlignment( JLabel.CENTER );
        }
    }
    
    public CustomRenderer (Color color, boolean[][] customColors,boolean center){
        setOpaque(true);
        this.customColors = customColors;
        this.cust = true;
        this.color = color;
        if (center){
            this.setHorizontalAlignment( JLabel.CENTER );
        }
    }
    
    public CustomRenderer (boolean center){
        if (center){
            this.setHorizontalAlignment( JLabel.CENTER );
        }
    }
        
    public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, java.lang.Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        java.awt.Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        if(cust){
            if (row == 0 && column == 1 || row == 3 && column == 4){//customColors[row][column]){
                cellComponent.setBackground(java.awt.Color.ORANGE);
            }
            else {
                cellComponent.setBackground(java.awt.Color.WHITE);
            }
        }else {
            cellComponent.setBackground(color);
        }
        return cellComponent;
    }
}

class CustomModel extends DefaultTableModel{
    
    boolean[][] customEdit;
    boolean cust = false;
            
    public CustomModel(Object[][] data, Object[] columnNames){
        super(data,columnNames);
    }
    Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class
    };
    boolean[] canEdit = new boolean [] {
        false, false, true, true, false
    };

    public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
    }

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        if (cust)
            return customEdit [columnIndex][rowIndex];
        else
            return canEdit [columnIndex];
    }

    public void setEditable(int column, boolean value){
        canEdit[column] = value;
    }
    
    public void setEditable(int column, int row, boolean value){
        customEdit[column] [row] = value;
    }

    public void setTypes(Class[] types){
        this.types = types;
    }

    void setCanEdit(boolean[] canEdit) {
        this.canEdit = canEdit;
    }
    
    void setCanEditMatrix(boolean[][] customEdit) {
        this.customEdit = customEdit;
    }
    
    void setCustom(boolean cust){
        this.cust = cust;
    }
}